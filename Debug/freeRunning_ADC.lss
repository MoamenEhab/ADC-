
freeRunning_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000100a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000100a  0000109e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800064  00800064  000010a2  2**0
                  ALLOC
  3 .stab         00001278  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cf5  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e6       	ldi	r26, 0x64	; 100
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 95 07 	call	0xf2a	; 0xf2a <main>
      8a:	0c 94 03 08 	jmp	0x1006	; 0x1006 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
/* Inputs : void														 			                     */
/* 																								         */
/* Outputs: void																	                     */

void ADC_init(void)                                                                                         //-----------> (.text) non volatile memory
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	digitalVal=0 ;
      9a:	10 92 66 00 	sts	0x0066, r1
      9e:	10 92 65 00 	sts	0x0065, r1

	channelsCounter=channel0;
      a2:	10 92 64 00 	sts	0x0064, r1
/*********************************** Set ADC REF VOLTAGE**************************************************/
	switch(ADC_REF_VOLTAGE)
	{

	case ADC_REF_VOLTAGE_5V :
		bitclear(ADMUX,REFS1);
      a6:	a7 e2       	ldi	r26, 0x27	; 39
      a8:	b0 e0       	ldi	r27, 0x00	; 0
      aa:	e7 e2       	ldi	r30, 0x27	; 39
      ac:	f0 e0       	ldi	r31, 0x00	; 0
      ae:	80 81       	ld	r24, Z
      b0:	8f 77       	andi	r24, 0x7F	; 127
      b2:	8c 93       	st	X, r24
		bitset(ADMUX,REFS0);
      b4:	a7 e2       	ldi	r26, 0x27	; 39
      b6:	b0 e0       	ldi	r27, 0x00	; 0
      b8:	e7 e2       	ldi	r30, 0x27	; 39
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	80 81       	ld	r24, Z
      be:	80 64       	ori	r24, 0x40	; 64
      c0:	8c 93       	st	X, r24
		bitset(ADCSRA,ADPS1);
		bitclear(ADCSRA,ADPS2);
		break;

	case  ADC_CLOCK_FREQUENCY_1000KHZ :
		bitset(ADCSRA,ADPS0);
      c2:	a6 e2       	ldi	r26, 0x26	; 38
      c4:	b0 e0       	ldi	r27, 0x00	; 0
      c6:	e6 e2       	ldi	r30, 0x26	; 38
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	80 81       	ld	r24, Z
      cc:	81 60       	ori	r24, 0x01	; 1
      ce:	8c 93       	st	X, r24
		bitset(ADCSRA,ADPS1);
      d0:	a6 e2       	ldi	r26, 0x26	; 38
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	e6 e2       	ldi	r30, 0x26	; 38
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	80 81       	ld	r24, Z
      da:	82 60       	ori	r24, 0x02	; 2
      dc:	8c 93       	st	X, r24
		bitclear(ADCSRA,ADPS2);
      de:	a6 e2       	ldi	r26, 0x26	; 38
      e0:	b0 e0       	ldi	r27, 0x00	; 0
      e2:	e6 e2       	ldi	r30, 0x26	; 38
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	80 81       	ld	r24, Z
      e8:	8b 7f       	andi	r24, 0xFB	; 251
      ea:	8c 93       	st	X, r24

	switch(ADC_RESOLUTION)
	{

	case ADC_RESOLUTION_8_BIT :
		bitset(ADMUX,ADLAR);
      ec:	a7 e2       	ldi	r26, 0x27	; 39
      ee:	b0 e0       	ldi	r27, 0x00	; 0
      f0:	e7 e2       	ldi	r30, 0x27	; 39
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	80 81       	ld	r24, Z
      f6:	80 62       	ori	r24, 0x20	; 32
      f8:	8c 93       	st	X, r24


	}

/**************************************  ADC Enable  *****************************************************/
bitset(ADCSRA,ADEN);
      fa:	a6 e2       	ldi	r26, 0x26	; 38
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	e6 e2       	ldi	r30, 0x26	; 38
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	80 81       	ld	r24, Z
     104:	80 68       	ori	r24, 0x80	; 128
     106:	8c 93       	st	X, r24

}
     108:	cf 91       	pop	r28
     10a:	df 91       	pop	r29
     10c:	08 95       	ret

0000010e <ADC_FreeR>:

/*********************************************************************************************************/
//void ADC_FreeR(void *ptrTofn(ADCvalues *ptrToADCvals))

void ADC_FreeR(void *ptrTofn(ADCvalues))
{feature=2;
     10e:	df 93       	push	r29
     110:	cf 93       	push	r28
     112:	00 d0       	rcall	.+0      	; 0x114 <ADC_FreeR+0x6>
     114:	00 d0       	rcall	.+0      	; 0x116 <ADC_FreeR+0x8>
     116:	cd b7       	in	r28, 0x3d	; 61
     118:	de b7       	in	r29, 0x3e	; 62
     11a:	9a 83       	std	Y+2, r25	; 0x02
     11c:	89 83       	std	Y+1, r24	; 0x01
     11e:	82 e0       	ldi	r24, 0x02	; 2
     120:	80 93 68 00 	sts	0x0068, r24
ADC_channel=0;
     124:	10 92 67 00 	sts	0x0067, r1
	ptrTocallbkfn = ptrTofn;
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	9a 81       	ldd	r25, Y+2	; 0x02
     12c:	90 93 6c 00 	sts	0x006C, r25
     130:	80 93 6b 00 	sts	0x006B, r24
if (ADC_channel==channel0 && ADC_channel==channel1 && ADC_channel==channel2 && ADC_channel==channel3)
     134:	80 91 67 00 	lds	r24, 0x0067
     138:	88 23       	and	r24, r24
     13a:	09 f0       	breq	.+2      	; 0x13e <ADC_FreeR+0x30>
     13c:	83 c0       	rjmp	.+262    	; 0x244 <ADC_FreeR+0x136>
     13e:	80 91 67 00 	lds	r24, 0x0067
     142:	81 30       	cpi	r24, 0x01	; 1
     144:	09 f0       	breq	.+2      	; 0x148 <ADC_FreeR+0x3a>
     146:	7e c0       	rjmp	.+252    	; 0x244 <ADC_FreeR+0x136>
     148:	80 91 67 00 	lds	r24, 0x0067
     14c:	82 30       	cpi	r24, 0x02	; 2
     14e:	09 f0       	breq	.+2      	; 0x152 <ADC_FreeR+0x44>
     150:	79 c0       	rjmp	.+242    	; 0x244 <ADC_FreeR+0x136>
     152:	80 91 67 00 	lds	r24, 0x0067
     156:	83 30       	cpi	r24, 0x03	; 3
     158:	09 f0       	breq	.+2      	; 0x15c <ADC_FreeR+0x4e>
     15a:	74 c0       	rjmp	.+232    	; 0x244 <ADC_FreeR+0x136>
{
	switch(ADC_channel)
     15c:	80 91 67 00 	lds	r24, 0x0067
     160:	28 2f       	mov	r18, r24
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	3c 83       	std	Y+4, r19	; 0x04
     166:	2b 83       	std	Y+3, r18	; 0x03
     168:	8b 81       	ldd	r24, Y+3	; 0x03
     16a:	9c 81       	ldd	r25, Y+4	; 0x04
     16c:	81 30       	cpi	r24, 0x01	; 1
     16e:	91 05       	cpc	r25, r1
     170:	59 f1       	breq	.+86     	; 0x1c8 <ADC_FreeR+0xba>
     172:	2b 81       	ldd	r18, Y+3	; 0x03
     174:	3c 81       	ldd	r19, Y+4	; 0x04
     176:	22 30       	cpi	r18, 0x02	; 2
     178:	31 05       	cpc	r19, r1
     17a:	2c f4       	brge	.+10     	; 0x186 <ADC_FreeR+0x78>
     17c:	8b 81       	ldd	r24, Y+3	; 0x03
     17e:	9c 81       	ldd	r25, Y+4	; 0x04
     180:	00 97       	sbiw	r24, 0x00	; 0
     182:	69 f0       	breq	.+26     	; 0x19e <ADC_FreeR+0x90>
     184:	5f c0       	rjmp	.+190    	; 0x244 <ADC_FreeR+0x136>
     186:	2b 81       	ldd	r18, Y+3	; 0x03
     188:	3c 81       	ldd	r19, Y+4	; 0x04
     18a:	22 30       	cpi	r18, 0x02	; 2
     18c:	31 05       	cpc	r19, r1
     18e:	89 f1       	breq	.+98     	; 0x1f2 <ADC_FreeR+0xe4>
     190:	8b 81       	ldd	r24, Y+3	; 0x03
     192:	9c 81       	ldd	r25, Y+4	; 0x04
     194:	83 30       	cpi	r24, 0x03	; 3
     196:	91 05       	cpc	r25, r1
     198:	09 f4       	brne	.+2      	; 0x19c <ADC_FreeR+0x8e>
     19a:	40 c0       	rjmp	.+128    	; 0x21c <ADC_FreeR+0x10e>
     19c:	53 c0       	rjmp	.+166    	; 0x244 <ADC_FreeR+0x136>
			{
			case channel0 :
				ADC_setChannel(selectedCH.CH0);
     19e:	80 91 60 00 	lds	r24, 0x0060
     1a2:	88 2f       	mov	r24, r24
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 00 02 	call	0x400	; 0x400 <ADC_setChannel>
			    bitset(ADCSRA,ADIE);
     1aa:	a6 e2       	ldi	r26, 0x26	; 38
     1ac:	b0 e0       	ldi	r27, 0x00	; 0
     1ae:	e6 e2       	ldi	r30, 0x26	; 38
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	80 81       	ld	r24, Z
     1b4:	88 60       	ori	r24, 0x08	; 8
     1b6:	8c 93       	st	X, r24
			    bitset(ADCSRA,ADSC);
     1b8:	a6 e2       	ldi	r26, 0x26	; 38
     1ba:	b0 e0       	ldi	r27, 0x00	; 0
     1bc:	e6 e2       	ldi	r30, 0x26	; 38
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	80 81       	ld	r24, Z
     1c2:	80 64       	ori	r24, 0x40	; 64
     1c4:	8c 93       	st	X, r24
     1c6:	3e c0       	rjmp	.+124    	; 0x244 <ADC_FreeR+0x136>
				break;
			case channel1 :
				ADC_setChannel(selectedCH.CH1);
     1c8:	80 91 61 00 	lds	r24, 0x0061
     1cc:	88 2f       	mov	r24, r24
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 00 02 	call	0x400	; 0x400 <ADC_setChannel>
				bitset(ADCSRA,ADIE);
     1d4:	a6 e2       	ldi	r26, 0x26	; 38
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	e6 e2       	ldi	r30, 0x26	; 38
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	80 81       	ld	r24, Z
     1de:	88 60       	ori	r24, 0x08	; 8
     1e0:	8c 93       	st	X, r24
				bitset(ADCSRA,ADSC);
     1e2:	a6 e2       	ldi	r26, 0x26	; 38
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
     1e6:	e6 e2       	ldi	r30, 0x26	; 38
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	80 81       	ld	r24, Z
     1ec:	80 64       	ori	r24, 0x40	; 64
     1ee:	8c 93       	st	X, r24
     1f0:	29 c0       	rjmp	.+82     	; 0x244 <ADC_FreeR+0x136>
				break;
			case channel2 :
				ADC_setChannel(selectedCH.CH2);
     1f2:	80 91 62 00 	lds	r24, 0x0062
     1f6:	88 2f       	mov	r24, r24
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 00 02 	call	0x400	; 0x400 <ADC_setChannel>
				bitset(ADCSRA,ADIE);
     1fe:	a6 e2       	ldi	r26, 0x26	; 38
     200:	b0 e0       	ldi	r27, 0x00	; 0
     202:	e6 e2       	ldi	r30, 0x26	; 38
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	80 81       	ld	r24, Z
     208:	88 60       	ori	r24, 0x08	; 8
     20a:	8c 93       	st	X, r24
				bitset(ADCSRA,ADSC);
     20c:	a6 e2       	ldi	r26, 0x26	; 38
     20e:	b0 e0       	ldi	r27, 0x00	; 0
     210:	e6 e2       	ldi	r30, 0x26	; 38
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	80 81       	ld	r24, Z
     216:	80 64       	ori	r24, 0x40	; 64
     218:	8c 93       	st	X, r24
     21a:	14 c0       	rjmp	.+40     	; 0x244 <ADC_FreeR+0x136>
				break;
			case channel3 :
				ADC_setChannel(selectedCH.CH3);
     21c:	80 91 63 00 	lds	r24, 0x0063
     220:	88 2f       	mov	r24, r24
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 00 02 	call	0x400	; 0x400 <ADC_setChannel>
				bitset(ADCSRA,ADIE);
     228:	a6 e2       	ldi	r26, 0x26	; 38
     22a:	b0 e0       	ldi	r27, 0x00	; 0
     22c:	e6 e2       	ldi	r30, 0x26	; 38
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	88 60       	ori	r24, 0x08	; 8
     234:	8c 93       	st	X, r24
				bitset(ADCSRA,ADSC);
     236:	a6 e2       	ldi	r26, 0x26	; 38
     238:	b0 e0       	ldi	r27, 0x00	; 0
     23a:	e6 e2       	ldi	r30, 0x26	; 38
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	80 64       	ori	r24, 0x40	; 64
     242:	8c 93       	st	X, r24
				break;
			}
}

						    /******************************* enable of ADC interrupt (PIE)********************************************/
						    bitset(ADCSRA,ADIE);
     244:	a6 e2       	ldi	r26, 0x26	; 38
     246:	b0 e0       	ldi	r27, 0x00	; 0
     248:	e6 e2       	ldi	r30, 0x26	; 38
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	80 81       	ld	r24, Z
     24e:	88 60       	ori	r24, 0x08	; 8
     250:	8c 93       	st	X, r24
						    /************************************** Start Conversion *************************************************/
						    bitset(ADCSRA,ADSC); // this bit is set to zero after conversion finished
     252:	a6 e2       	ldi	r26, 0x26	; 38
     254:	b0 e0       	ldi	r27, 0x00	; 0
     256:	e6 e2       	ldi	r30, 0x26	; 38
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	80 64       	ori	r24, 0x40	; 64
     25e:	8c 93       	st	X, r24

}
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	cf 91       	pop	r28
     26a:	df 91       	pop	r29
     26c:	08 95       	ret

0000026e <asyncronousADC_startConversion>:
/*  	    						 			                                                         */
/* 																								         */
/* Outputs: void                                                                                         */

void asyncronousADC_startConversion(u8 channel , void * ptrToFun(u8, u16))                                 //-----------> (.text) non volatile memory
{feature=1;
     26e:	df 93       	push	r29
     270:	cf 93       	push	r28
     272:	00 d0       	rcall	.+0      	; 0x274 <asyncronousADC_startConversion+0x6>
     274:	00 d0       	rcall	.+0      	; 0x276 <asyncronousADC_startConversion+0x8>
     276:	0f 92       	push	r0
     278:	cd b7       	in	r28, 0x3d	; 61
     27a:	de b7       	in	r29, 0x3e	; 62
     27c:	89 83       	std	Y+1, r24	; 0x01
     27e:	7b 83       	std	Y+3, r23	; 0x03
     280:	6a 83       	std	Y+2, r22	; 0x02
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	80 93 68 00 	sts	0x0068, r24
	ptrToCallBackFun = ptrToFun ;
     288:	8a 81       	ldd	r24, Y+2	; 0x02
     28a:	9b 81       	ldd	r25, Y+3	; 0x03
     28c:	90 93 76 00 	sts	0x0076, r25
     290:	80 93 75 00 	sts	0x0075, r24

/********************************* Set channel to be converted*******************************************/
	switch(channel)
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	28 2f       	mov	r18, r24
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	3d 83       	std	Y+5, r19	; 0x05
     29c:	2c 83       	std	Y+4, r18	; 0x04
     29e:	8c 81       	ldd	r24, Y+4	; 0x04
     2a0:	9d 81       	ldd	r25, Y+5	; 0x05
     2a2:	83 30       	cpi	r24, 0x03	; 3
     2a4:	91 05       	cpc	r25, r1
     2a6:	09 f4       	brne	.+2      	; 0x2aa <asyncronousADC_startConversion+0x3c>
     2a8:	50 c0       	rjmp	.+160    	; 0x34a <asyncronousADC_startConversion+0xdc>
     2aa:	2c 81       	ldd	r18, Y+4	; 0x04
     2ac:	3d 81       	ldd	r19, Y+5	; 0x05
     2ae:	24 30       	cpi	r18, 0x04	; 4
     2b0:	31 05       	cpc	r19, r1
     2b2:	7c f4       	brge	.+30     	; 0x2d2 <asyncronousADC_startConversion+0x64>
     2b4:	8c 81       	ldd	r24, Y+4	; 0x04
     2b6:	9d 81       	ldd	r25, Y+5	; 0x05
     2b8:	81 30       	cpi	r24, 0x01	; 1
     2ba:	91 05       	cpc	r25, r1
     2bc:	71 f1       	breq	.+92     	; 0x31a <asyncronousADC_startConversion+0xac>
     2be:	2c 81       	ldd	r18, Y+4	; 0x04
     2c0:	3d 81       	ldd	r19, Y+5	; 0x05
     2c2:	22 30       	cpi	r18, 0x02	; 2
     2c4:	31 05       	cpc	r19, r1
     2c6:	ac f5       	brge	.+106    	; 0x332 <asyncronousADC_startConversion+0xc4>
     2c8:	8c 81       	ldd	r24, Y+4	; 0x04
     2ca:	9d 81       	ldd	r25, Y+5	; 0x05
     2cc:	00 97       	sbiw	r24, 0x00	; 0
     2ce:	c9 f0       	breq	.+50     	; 0x302 <asyncronousADC_startConversion+0x94>
     2d0:	78 c0       	rjmp	.+240    	; 0x3c2 <asyncronousADC_startConversion+0x154>
     2d2:	2c 81       	ldd	r18, Y+4	; 0x04
     2d4:	3d 81       	ldd	r19, Y+5	; 0x05
     2d6:	25 30       	cpi	r18, 0x05	; 5
     2d8:	31 05       	cpc	r19, r1
     2da:	09 f4       	brne	.+2      	; 0x2de <asyncronousADC_startConversion+0x70>
     2dc:	4e c0       	rjmp	.+156    	; 0x37a <asyncronousADC_startConversion+0x10c>
     2de:	8c 81       	ldd	r24, Y+4	; 0x04
     2e0:	9d 81       	ldd	r25, Y+5	; 0x05
     2e2:	85 30       	cpi	r24, 0x05	; 5
     2e4:	91 05       	cpc	r25, r1
     2e6:	ec f1       	brlt	.+122    	; 0x362 <asyncronousADC_startConversion+0xf4>
     2e8:	2c 81       	ldd	r18, Y+4	; 0x04
     2ea:	3d 81       	ldd	r19, Y+5	; 0x05
     2ec:	26 30       	cpi	r18, 0x06	; 6
     2ee:	31 05       	cpc	r19, r1
     2f0:	09 f4       	brne	.+2      	; 0x2f4 <asyncronousADC_startConversion+0x86>
     2f2:	4f c0       	rjmp	.+158    	; 0x392 <asyncronousADC_startConversion+0x124>
     2f4:	8c 81       	ldd	r24, Y+4	; 0x04
     2f6:	9d 81       	ldd	r25, Y+5	; 0x05
     2f8:	87 30       	cpi	r24, 0x07	; 7
     2fa:	91 05       	cpc	r25, r1
     2fc:	09 f4       	brne	.+2      	; 0x300 <asyncronousADC_startConversion+0x92>
     2fe:	55 c0       	rjmp	.+170    	; 0x3aa <asyncronousADC_startConversion+0x13c>
     300:	60 c0       	rjmp	.+192    	; 0x3c2 <asyncronousADC_startConversion+0x154>
	{
	case ADC_CHANNEL_0 :
		ADMUX |= channel;
     302:	a7 e2       	ldi	r26, 0x27	; 39
     304:	b0 e0       	ldi	r27, 0x00	; 0
     306:	e7 e2       	ldi	r30, 0x27	; 39
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	90 81       	ld	r25, Z
     30c:	89 81       	ldd	r24, Y+1	; 0x01
     30e:	89 2b       	or	r24, r25
     310:	8c 93       	st	X, r24
		ADC_channel=channel;
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	80 93 67 00 	sts	0x0067, r24
     318:	5d c0       	rjmp	.+186    	; 0x3d4 <asyncronousADC_startConversion+0x166>

		break;

	case ADC_CHANNEL_1 :
		ADMUX |= channel;
     31a:	a7 e2       	ldi	r26, 0x27	; 39
     31c:	b0 e0       	ldi	r27, 0x00	; 0
     31e:	e7 e2       	ldi	r30, 0x27	; 39
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	90 81       	ld	r25, Z
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	89 2b       	or	r24, r25
     328:	8c 93       	st	X, r24
		ADC_channel=channel;
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	80 93 67 00 	sts	0x0067, r24
     330:	51 c0       	rjmp	.+162    	; 0x3d4 <asyncronousADC_startConversion+0x166>

		break;

	case ADC_CHANNEL_2 :
		ADMUX |= channel;
     332:	a7 e2       	ldi	r26, 0x27	; 39
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	e7 e2       	ldi	r30, 0x27	; 39
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	90 81       	ld	r25, Z
     33c:	89 81       	ldd	r24, Y+1	; 0x01
     33e:	89 2b       	or	r24, r25
     340:	8c 93       	st	X, r24
		ADC_channel=channel;
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	80 93 67 00 	sts	0x0067, r24
     348:	45 c0       	rjmp	.+138    	; 0x3d4 <asyncronousADC_startConversion+0x166>

		break;

	case ADC_CHANNEL_3 :
		ADMUX |= channel;
     34a:	a7 e2       	ldi	r26, 0x27	; 39
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	e7 e2       	ldi	r30, 0x27	; 39
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	90 81       	ld	r25, Z
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	89 2b       	or	r24, r25
     358:	8c 93       	st	X, r24
		ADC_channel=channel;
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	80 93 67 00 	sts	0x0067, r24
     360:	39 c0       	rjmp	.+114    	; 0x3d4 <asyncronousADC_startConversion+0x166>

		break;

	case ADC_CHANNEL_4 :
		ADMUX |= channel;
     362:	a7 e2       	ldi	r26, 0x27	; 39
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	e7 e2       	ldi	r30, 0x27	; 39
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	90 81       	ld	r25, Z
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	89 2b       	or	r24, r25
     370:	8c 93       	st	X, r24
		ADC_channel=channel;
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	80 93 67 00 	sts	0x0067, r24
     378:	2d c0       	rjmp	.+90     	; 0x3d4 <asyncronousADC_startConversion+0x166>

		break;

	case ADC_CHANNEL_5 :
		ADMUX |= channel;
     37a:	a7 e2       	ldi	r26, 0x27	; 39
     37c:	b0 e0       	ldi	r27, 0x00	; 0
     37e:	e7 e2       	ldi	r30, 0x27	; 39
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	90 81       	ld	r25, Z
     384:	89 81       	ldd	r24, Y+1	; 0x01
     386:	89 2b       	or	r24, r25
     388:	8c 93       	st	X, r24
		ADC_channel=channel;
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	80 93 67 00 	sts	0x0067, r24
     390:	21 c0       	rjmp	.+66     	; 0x3d4 <asyncronousADC_startConversion+0x166>

		break;

	case ADC_CHANNEL_6 :
		ADMUX |= channel;
     392:	a7 e2       	ldi	r26, 0x27	; 39
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	e7 e2       	ldi	r30, 0x27	; 39
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	90 81       	ld	r25, Z
     39c:	89 81       	ldd	r24, Y+1	; 0x01
     39e:	89 2b       	or	r24, r25
     3a0:	8c 93       	st	X, r24
		ADC_channel=channel;
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
     3a4:	80 93 67 00 	sts	0x0067, r24
     3a8:	15 c0       	rjmp	.+42     	; 0x3d4 <asyncronousADC_startConversion+0x166>

		break;

	case ADC_CHANNEL_7 :
		ADMUX |= channel;
     3aa:	a7 e2       	ldi	r26, 0x27	; 39
     3ac:	b0 e0       	ldi	r27, 0x00	; 0
     3ae:	e7 e2       	ldi	r30, 0x27	; 39
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	90 81       	ld	r25, Z
     3b4:	89 81       	ldd	r24, Y+1	; 0x01
     3b6:	89 2b       	or	r24, r25
     3b8:	8c 93       	st	X, r24
		ADC_channel=channel;
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	80 93 67 00 	sts	0x0067, r24
     3c0:	09 c0       	rjmp	.+18     	; 0x3d4 <asyncronousADC_startConversion+0x166>

		break;

	default :
		ADMUX |= PortA_Num;
     3c2:	a7 e2       	ldi	r26, 0x27	; 39
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	e7 e2       	ldi	r30, 0x27	; 39
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	80 81       	ld	r24, Z
     3cc:	8c 93       	st	X, r24


		ADC_channel=channel;
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	80 93 67 00 	sts	0x0067, r24
	}

/******************************* enable of ADC interrupt (PIE)********************************************/
 bitset(ADCSRA,ADIE);
     3d4:	a6 e2       	ldi	r26, 0x26	; 38
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e6 e2       	ldi	r30, 0x26	; 38
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	80 81       	ld	r24, Z
     3de:	88 60       	ori	r24, 0x08	; 8
     3e0:	8c 93       	st	X, r24
/************************************** Start Conversion *************************************************/

bitset(ADCSRA,ADSC);  // this bit is set to zero after conversion finished
     3e2:	a6 e2       	ldi	r26, 0x26	; 38
     3e4:	b0 e0       	ldi	r27, 0x00	; 0
     3e6:	e6 e2       	ldi	r30, 0x26	; 38
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	80 81       	ld	r24, Z
     3ec:	80 64       	ori	r24, 0x40	; 64
     3ee:	8c 93       	st	X, r24
}
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	cf 91       	pop	r28
     3fc:	df 91       	pop	r29
     3fe:	08 95       	ret

00000400 <ADC_setChannel>:

/*********************************************************************************************************/
void ADC_setChannel(u8 ch);
void ADC_setChannel(u8 ch)
{
     400:	df 93       	push	r29
     402:	cf 93       	push	r28
     404:	00 d0       	rcall	.+0      	; 0x406 <ADC_setChannel+0x6>
     406:	0f 92       	push	r0
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	89 83       	std	Y+1, r24	; 0x01
	switch(ch)
     40e:	89 81       	ldd	r24, Y+1	; 0x01
     410:	28 2f       	mov	r18, r24
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	3b 83       	std	Y+3, r19	; 0x03
     416:	2a 83       	std	Y+2, r18	; 0x02
     418:	8a 81       	ldd	r24, Y+2	; 0x02
     41a:	9b 81       	ldd	r25, Y+3	; 0x03
     41c:	83 30       	cpi	r24, 0x03	; 3
     41e:	91 05       	cpc	r25, r1
     420:	09 f4       	brne	.+2      	; 0x424 <ADC_setChannel+0x24>
     422:	46 c0       	rjmp	.+140    	; 0x4b0 <ADC_setChannel+0xb0>
     424:	2a 81       	ldd	r18, Y+2	; 0x02
     426:	3b 81       	ldd	r19, Y+3	; 0x03
     428:	24 30       	cpi	r18, 0x04	; 4
     42a:	31 05       	cpc	r19, r1
     42c:	7c f4       	brge	.+30     	; 0x44c <ADC_setChannel+0x4c>
     42e:	8a 81       	ldd	r24, Y+2	; 0x02
     430:	9b 81       	ldd	r25, Y+3	; 0x03
     432:	81 30       	cpi	r24, 0x01	; 1
     434:	91 05       	cpc	r25, r1
     436:	51 f1       	breq	.+84     	; 0x48c <ADC_setChannel+0x8c>
     438:	2a 81       	ldd	r18, Y+2	; 0x02
     43a:	3b 81       	ldd	r19, Y+3	; 0x03
     43c:	22 30       	cpi	r18, 0x02	; 2
     43e:	31 05       	cpc	r19, r1
     440:	74 f5       	brge	.+92     	; 0x49e <ADC_setChannel+0x9e>
     442:	8a 81       	ldd	r24, Y+2	; 0x02
     444:	9b 81       	ldd	r25, Y+3	; 0x03
     446:	00 97       	sbiw	r24, 0x00	; 0
     448:	c1 f0       	breq	.+48     	; 0x47a <ADC_setChannel+0x7a>
     44a:	5f c0       	rjmp	.+190    	; 0x50a <ADC_setChannel+0x10a>
     44c:	2a 81       	ldd	r18, Y+2	; 0x02
     44e:	3b 81       	ldd	r19, Y+3	; 0x03
     450:	25 30       	cpi	r18, 0x05	; 5
     452:	31 05       	cpc	r19, r1
     454:	09 f4       	brne	.+2      	; 0x458 <ADC_setChannel+0x58>
     456:	3e c0       	rjmp	.+124    	; 0x4d4 <ADC_setChannel+0xd4>
     458:	8a 81       	ldd	r24, Y+2	; 0x02
     45a:	9b 81       	ldd	r25, Y+3	; 0x03
     45c:	85 30       	cpi	r24, 0x05	; 5
     45e:	91 05       	cpc	r25, r1
     460:	84 f1       	brlt	.+96     	; 0x4c2 <ADC_setChannel+0xc2>
     462:	2a 81       	ldd	r18, Y+2	; 0x02
     464:	3b 81       	ldd	r19, Y+3	; 0x03
     466:	26 30       	cpi	r18, 0x06	; 6
     468:	31 05       	cpc	r19, r1
     46a:	e9 f1       	breq	.+122    	; 0x4e6 <ADC_setChannel+0xe6>
     46c:	8a 81       	ldd	r24, Y+2	; 0x02
     46e:	9b 81       	ldd	r25, Y+3	; 0x03
     470:	87 30       	cpi	r24, 0x07	; 7
     472:	91 05       	cpc	r25, r1
     474:	09 f4       	brne	.+2      	; 0x478 <ADC_setChannel+0x78>
     476:	40 c0       	rjmp	.+128    	; 0x4f8 <ADC_setChannel+0xf8>
     478:	48 c0       	rjmp	.+144    	; 0x50a <ADC_setChannel+0x10a>
		{
		case ADC_CHANNEL_0 :
			ADMUX |= ch;
     47a:	a7 e2       	ldi	r26, 0x27	; 39
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e7 e2       	ldi	r30, 0x27	; 39
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	90 81       	ld	r25, Z
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	89 2b       	or	r24, r25
     488:	8c 93       	st	X, r24
     48a:	45 c0       	rjmp	.+138    	; 0x516 <ADC_setChannel+0x116>

			break;

		case ADC_CHANNEL_1 :
			ADMUX |= ch;
     48c:	a7 e2       	ldi	r26, 0x27	; 39
     48e:	b0 e0       	ldi	r27, 0x00	; 0
     490:	e7 e2       	ldi	r30, 0x27	; 39
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	90 81       	ld	r25, Z
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	89 2b       	or	r24, r25
     49a:	8c 93       	st	X, r24
     49c:	3c c0       	rjmp	.+120    	; 0x516 <ADC_setChannel+0x116>

			break;

		case ADC_CHANNEL_2 :
			ADMUX |= ch;
     49e:	a7 e2       	ldi	r26, 0x27	; 39
     4a0:	b0 e0       	ldi	r27, 0x00	; 0
     4a2:	e7 e2       	ldi	r30, 0x27	; 39
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	90 81       	ld	r25, Z
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	89 2b       	or	r24, r25
     4ac:	8c 93       	st	X, r24
     4ae:	33 c0       	rjmp	.+102    	; 0x516 <ADC_setChannel+0x116>

			break;

		case ADC_CHANNEL_3 :
			ADMUX |= ch;
     4b0:	a7 e2       	ldi	r26, 0x27	; 39
     4b2:	b0 e0       	ldi	r27, 0x00	; 0
     4b4:	e7 e2       	ldi	r30, 0x27	; 39
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	90 81       	ld	r25, Z
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	89 2b       	or	r24, r25
     4be:	8c 93       	st	X, r24
     4c0:	2a c0       	rjmp	.+84     	; 0x516 <ADC_setChannel+0x116>

			break;

		case ADC_CHANNEL_4 :
			ADMUX |= ch;
     4c2:	a7 e2       	ldi	r26, 0x27	; 39
     4c4:	b0 e0       	ldi	r27, 0x00	; 0
     4c6:	e7 e2       	ldi	r30, 0x27	; 39
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	90 81       	ld	r25, Z
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	89 2b       	or	r24, r25
     4d0:	8c 93       	st	X, r24
     4d2:	21 c0       	rjmp	.+66     	; 0x516 <ADC_setChannel+0x116>

			break;

		case ADC_CHANNEL_5 :
			ADMUX |= ch;
     4d4:	a7 e2       	ldi	r26, 0x27	; 39
     4d6:	b0 e0       	ldi	r27, 0x00	; 0
     4d8:	e7 e2       	ldi	r30, 0x27	; 39
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	90 81       	ld	r25, Z
     4de:	89 81       	ldd	r24, Y+1	; 0x01
     4e0:	89 2b       	or	r24, r25
     4e2:	8c 93       	st	X, r24
     4e4:	18 c0       	rjmp	.+48     	; 0x516 <ADC_setChannel+0x116>

			break;

		case ADC_CHANNEL_6 :
			ADMUX |= ch;
     4e6:	a7 e2       	ldi	r26, 0x27	; 39
     4e8:	b0 e0       	ldi	r27, 0x00	; 0
     4ea:	e7 e2       	ldi	r30, 0x27	; 39
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	90 81       	ld	r25, Z
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	89 2b       	or	r24, r25
     4f4:	8c 93       	st	X, r24
     4f6:	0f c0       	rjmp	.+30     	; 0x516 <ADC_setChannel+0x116>

			break;

		case ADC_CHANNEL_7 :
			ADMUX |= ch;
     4f8:	a7 e2       	ldi	r26, 0x27	; 39
     4fa:	b0 e0       	ldi	r27, 0x00	; 0
     4fc:	e7 e2       	ldi	r30, 0x27	; 39
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	90 81       	ld	r25, Z
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	89 2b       	or	r24, r25
     506:	8c 93       	st	X, r24
     508:	06 c0       	rjmp	.+12     	; 0x516 <ADC_setChannel+0x116>

			break;

		default :
			ADMUX |= PortA_Num;
     50a:	e7 e2       	ldi	r30, 0x27	; 39
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	a7 e2       	ldi	r26, 0x27	; 39
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	8c 91       	ld	r24, X
     514:	80 83       	st	Z, r24


		}
}
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	cf 91       	pop	r28
     51e:	df 91       	pop	r29
     520:	08 95       	ret

00000522 <ADC_reslution>:
void ADC_reslution(void);

void ADC_reslution(void)
{
     522:	df 93       	push	r29
     524:	cf 93       	push	r28
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
	 switch (ADC_RESOLUTION)
		  {

		  case ADC_RESOLUTION_8_BIT :
			  x=ADCH;
     52a:	e5 e2       	ldi	r30, 0x25	; 37
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	80 81       	ld	r24, Z
     530:	88 2f       	mov	r24, r24
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	90 93 6a 00 	sts	0x006A, r25
     538:	80 93 69 00 	sts	0x0069, r24

			  break;

		  }

}
     53c:	cf 91       	pop	r28
     53e:	df 91       	pop	r29
     540:	08 95       	ret

00000542 <__vector_16>:

ISR(ADC_vect)
{
     542:	1f 92       	push	r1
     544:	0f 92       	push	r0
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	0f 92       	push	r0
     54a:	11 24       	eor	r1, r1
     54c:	2f 93       	push	r18
     54e:	3f 93       	push	r19
     550:	4f 93       	push	r20
     552:	5f 93       	push	r21
     554:	6f 93       	push	r22
     556:	7f 93       	push	r23
     558:	8f 93       	push	r24
     55a:	9f 93       	push	r25
     55c:	af 93       	push	r26
     55e:	bf 93       	push	r27
     560:	ef 93       	push	r30
     562:	ff 93       	push	r31
     564:	df 93       	push	r29
     566:	cf 93       	push	r28
     568:	00 d0       	rcall	.+0      	; 0x56a <__vector_16+0x28>
     56a:	00 d0       	rcall	.+0      	; 0x56c <__vector_16+0x2a>
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
	switch(feature)
     570:	80 91 68 00 	lds	r24, 0x0068
     574:	28 2f       	mov	r18, r24
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	3c 83       	std	Y+4, r19	; 0x04
     57a:	2b 83       	std	Y+3, r18	; 0x03
     57c:	8b 81       	ldd	r24, Y+3	; 0x03
     57e:	9c 81       	ldd	r25, Y+4	; 0x04
     580:	81 30       	cpi	r24, 0x01	; 1
     582:	91 05       	cpc	r25, r1
     584:	31 f0       	breq	.+12     	; 0x592 <__vector_16+0x50>
     586:	2b 81       	ldd	r18, Y+3	; 0x03
     588:	3c 81       	ldd	r19, Y+4	; 0x04
     58a:	22 30       	cpi	r18, 0x02	; 2
     58c:	31 05       	cpc	r19, r1
     58e:	c1 f0       	breq	.+48     	; 0x5c0 <__vector_16+0x7e>
     590:	91 c0       	rjmp	.+290    	; 0x6b4 <__vector_16+0x172>
	{ case 1 :
		ADC_reslution();
     592:	0e 94 91 02 	call	0x522	; 0x522 <ADC_reslution>
		digitalVal=x;
     596:	80 91 69 00 	lds	r24, 0x0069
     59a:	90 91 6a 00 	lds	r25, 0x006A
     59e:	90 93 66 00 	sts	0x0066, r25
     5a2:	80 93 65 00 	sts	0x0065, r24
		ptrToCallBackFun(ADC_channel , digitalVal);
     5a6:	e0 91 75 00 	lds	r30, 0x0075
     5aa:	f0 91 76 00 	lds	r31, 0x0076
     5ae:	80 91 67 00 	lds	r24, 0x0067
     5b2:	20 91 65 00 	lds	r18, 0x0065
     5b6:	30 91 66 00 	lds	r19, 0x0066
     5ba:	b9 01       	movw	r22, r18
     5bc:	09 95       	icall
     5be:	7a c0       	rjmp	.+244    	; 0x6b4 <__vector_16+0x172>

		/*************************** Return "digital value" ************************************************/

	case 2 :

		switch(ADC_channel)
     5c0:	80 91 67 00 	lds	r24, 0x0067
     5c4:	28 2f       	mov	r18, r24
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	3a 83       	std	Y+2, r19	; 0x02
     5ca:	29 83       	std	Y+1, r18	; 0x01
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	9a 81       	ldd	r25, Y+2	; 0x02
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	91 05       	cpc	r25, r1
     5d4:	29 f1       	breq	.+74     	; 0x620 <__vector_16+0xde>
     5d6:	29 81       	ldd	r18, Y+1	; 0x01
     5d8:	3a 81       	ldd	r19, Y+2	; 0x02
     5da:	22 30       	cpi	r18, 0x02	; 2
     5dc:	31 05       	cpc	r19, r1
     5de:	2c f4       	brge	.+10     	; 0x5ea <__vector_16+0xa8>
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	9a 81       	ldd	r25, Y+2	; 0x02
     5e4:	00 97       	sbiw	r24, 0x00	; 0
     5e6:	61 f0       	breq	.+24     	; 0x600 <__vector_16+0xbe>
     5e8:	50 c0       	rjmp	.+160    	; 0x68a <__vector_16+0x148>
     5ea:	29 81       	ldd	r18, Y+1	; 0x01
     5ec:	3a 81       	ldd	r19, Y+2	; 0x02
     5ee:	22 30       	cpi	r18, 0x02	; 2
     5f0:	31 05       	cpc	r19, r1
     5f2:	31 f1       	breq	.+76     	; 0x640 <__vector_16+0xfe>
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	9a 81       	ldd	r25, Y+2	; 0x02
     5f8:	83 30       	cpi	r24, 0x03	; 3
     5fa:	91 05       	cpc	r25, r1
     5fc:	89 f1       	breq	.+98     	; 0x660 <__vector_16+0x11e>
     5fe:	45 c0       	rjmp	.+138    	; 0x68a <__vector_16+0x148>
		{
		case channel0 :
			ADC_reslution();
     600:	0e 94 91 02 	call	0x522	; 0x522 <ADC_reslution>
			ADCvals.value0=x;
     604:	80 91 69 00 	lds	r24, 0x0069
     608:	90 91 6a 00 	lds	r25, 0x006A
     60c:	90 93 6e 00 	sts	0x006E, r25
     610:	80 93 6d 00 	sts	0x006D, r24
			ADC_channel++;
     614:	80 91 67 00 	lds	r24, 0x0067
     618:	8f 5f       	subi	r24, 0xFF	; 255
     61a:	80 93 67 00 	sts	0x0067, r24
     61e:	35 c0       	rjmp	.+106    	; 0x68a <__vector_16+0x148>

			break;

		case channel1 :
			ADC_reslution();
     620:	0e 94 91 02 	call	0x522	; 0x522 <ADC_reslution>
			ADCvals.value1=x;
     624:	80 91 69 00 	lds	r24, 0x0069
     628:	90 91 6a 00 	lds	r25, 0x006A
     62c:	90 93 70 00 	sts	0x0070, r25
     630:	80 93 6f 00 	sts	0x006F, r24
			ADC_channel++;
     634:	80 91 67 00 	lds	r24, 0x0067
     638:	8f 5f       	subi	r24, 0xFF	; 255
     63a:	80 93 67 00 	sts	0x0067, r24
     63e:	25 c0       	rjmp	.+74     	; 0x68a <__vector_16+0x148>

			break;

		case channel2 :
			ADC_reslution();
     640:	0e 94 91 02 	call	0x522	; 0x522 <ADC_reslution>
			ADCvals.value2=x;
     644:	80 91 69 00 	lds	r24, 0x0069
     648:	90 91 6a 00 	lds	r25, 0x006A
     64c:	90 93 72 00 	sts	0x0072, r25
     650:	80 93 71 00 	sts	0x0071, r24
			ADC_channel++;
     654:	80 91 67 00 	lds	r24, 0x0067
     658:	8f 5f       	subi	r24, 0xFF	; 255
     65a:	80 93 67 00 	sts	0x0067, r24
     65e:	15 c0       	rjmp	.+42     	; 0x68a <__vector_16+0x148>

			break;

		case channel3 :
			ADC_reslution();
     660:	0e 94 91 02 	call	0x522	; 0x522 <ADC_reslution>
			ADCvals.value3=x;
     664:	80 91 69 00 	lds	r24, 0x0069
     668:	90 91 6a 00 	lds	r25, 0x006A
     66c:	90 93 74 00 	sts	0x0074, r25
     670:	80 93 73 00 	sts	0x0073, r24
			ADC_channel++;
     674:	80 91 67 00 	lds	r24, 0x0067
     678:	8f 5f       	subi	r24, 0xFF	; 255
     67a:	80 93 67 00 	sts	0x0067, r24
			if(ADC_channel==4){ADC_channel=0;}
     67e:	80 91 67 00 	lds	r24, 0x0067
     682:	84 30       	cpi	r24, 0x04	; 4
     684:	11 f4       	brne	.+4      	; 0x68a <__vector_16+0x148>
     686:	10 92 67 00 	sts	0x0067, r1
			break;
		}
		ptrTocallbkfn(ADCvals);
     68a:	e0 91 6b 00 	lds	r30, 0x006B
     68e:	f0 91 6c 00 	lds	r31, 0x006C
     692:	20 91 6d 00 	lds	r18, 0x006D
     696:	30 91 6e 00 	lds	r19, 0x006E
     69a:	40 91 6f 00 	lds	r20, 0x006F
     69e:	50 91 70 00 	lds	r21, 0x0070
     6a2:	60 91 71 00 	lds	r22, 0x0071
     6a6:	70 91 72 00 	lds	r23, 0x0072
     6aa:	80 91 73 00 	lds	r24, 0x0073
     6ae:	90 91 74 00 	lds	r25, 0x0074
     6b2:	09 95       	icall

		break;
	}
}
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	cf 91       	pop	r28
     6be:	df 91       	pop	r29
     6c0:	ff 91       	pop	r31
     6c2:	ef 91       	pop	r30
     6c4:	bf 91       	pop	r27
     6c6:	af 91       	pop	r26
     6c8:	9f 91       	pop	r25
     6ca:	8f 91       	pop	r24
     6cc:	7f 91       	pop	r23
     6ce:	6f 91       	pop	r22
     6d0:	5f 91       	pop	r21
     6d2:	4f 91       	pop	r20
     6d4:	3f 91       	pop	r19
     6d6:	2f 91       	pop	r18
     6d8:	0f 90       	pop	r0
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	0f 90       	pop	r0
     6de:	1f 90       	pop	r1
     6e0:	18 95       	reti

000006e2 <DIO_Set_PORT_Direction>:
#include "macros.h"
#include "DIO.h"
#include "register.h"

u8 DIO_Set_PORT_Direction(u8 portNum , u8 Direction)
{
     6e2:	df 93       	push	r29
     6e4:	cf 93       	push	r28
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <DIO_Set_PORT_Direction+0x6>
     6e8:	00 d0       	rcall	.+0      	; 0x6ea <DIO_Set_PORT_Direction+0x8>
     6ea:	0f 92       	push	r0
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	8a 83       	std	Y+2, r24	; 0x02
     6f2:	6b 83       	std	Y+3, r22	; 0x03
	s8 State;

	State = OK;
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	89 83       	std	Y+1, r24	; 0x01
		switch(portNum)
     6f8:	8a 81       	ldd	r24, Y+2	; 0x02
     6fa:	28 2f       	mov	r18, r24
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	3d 83       	std	Y+5, r19	; 0x05
     700:	2c 83       	std	Y+4, r18	; 0x04
     702:	8c 81       	ldd	r24, Y+4	; 0x04
     704:	9d 81       	ldd	r25, Y+5	; 0x05
     706:	81 30       	cpi	r24, 0x01	; 1
     708:	91 05       	cpc	r25, r1
     70a:	d1 f0       	breq	.+52     	; 0x740 <DIO_Set_PORT_Direction+0x5e>
     70c:	2c 81       	ldd	r18, Y+4	; 0x04
     70e:	3d 81       	ldd	r19, Y+5	; 0x05
     710:	22 30       	cpi	r18, 0x02	; 2
     712:	31 05       	cpc	r19, r1
     714:	2c f4       	brge	.+10     	; 0x720 <DIO_Set_PORT_Direction+0x3e>
     716:	8c 81       	ldd	r24, Y+4	; 0x04
     718:	9d 81       	ldd	r25, Y+5	; 0x05
     71a:	00 97       	sbiw	r24, 0x00	; 0
     71c:	61 f0       	breq	.+24     	; 0x736 <DIO_Set_PORT_Direction+0x54>
     71e:	1f c0       	rjmp	.+62     	; 0x75e <DIO_Set_PORT_Direction+0x7c>
     720:	2c 81       	ldd	r18, Y+4	; 0x04
     722:	3d 81       	ldd	r19, Y+5	; 0x05
     724:	22 30       	cpi	r18, 0x02	; 2
     726:	31 05       	cpc	r19, r1
     728:	81 f0       	breq	.+32     	; 0x74a <DIO_Set_PORT_Direction+0x68>
     72a:	8c 81       	ldd	r24, Y+4	; 0x04
     72c:	9d 81       	ldd	r25, Y+5	; 0x05
     72e:	83 30       	cpi	r24, 0x03	; 3
     730:	91 05       	cpc	r25, r1
     732:	81 f0       	breq	.+32     	; 0x754 <DIO_Set_PORT_Direction+0x72>
     734:	14 c0       	rjmp	.+40     	; 0x75e <DIO_Set_PORT_Direction+0x7c>
		{
		case PortA_Num :

			DDRA = Direction;
     736:	ea e3       	ldi	r30, 0x3A	; 58
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	8b 81       	ldd	r24, Y+3	; 0x03
     73c:	80 83       	st	Z, r24
     73e:	10 c0       	rjmp	.+32     	; 0x760 <DIO_Set_PORT_Direction+0x7e>
			break;
		case PortB_Num:

			DDRB = Direction;
     740:	e7 e3       	ldi	r30, 0x37	; 55
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	8b 81       	ldd	r24, Y+3	; 0x03
     746:	80 83       	st	Z, r24
     748:	0b c0       	rjmp	.+22     	; 0x760 <DIO_Set_PORT_Direction+0x7e>
			break;

		case PortC_Num:
			DDRC = Direction;
     74a:	e4 e3       	ldi	r30, 0x34	; 52
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	8b 81       	ldd	r24, Y+3	; 0x03
     750:	80 83       	st	Z, r24
     752:	06 c0       	rjmp	.+12     	; 0x760 <DIO_Set_PORT_Direction+0x7e>
			break;

		case PortD_Num:
			DDRD = Direction;
     754:	e1 e3       	ldi	r30, 0x31	; 49
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	8b 81       	ldd	r24, Y+3	; 0x03
     75a:	80 83       	st	Z, r24
     75c:	01 c0       	rjmp	.+2      	; 0x760 <DIO_Set_PORT_Direction+0x7e>
			break;
		default:
			State = Not_OK;
     75e:	19 82       	std	Y+1, r1	; 0x01
		}

		return(State);
     760:	89 81       	ldd	r24, Y+1	; 0x01
}
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	cf 91       	pop	r28
     76e:	df 91       	pop	r29
     770:	08 95       	ret

00000772 <DIO_Set_PIN_Direction>:
u8 DIO_Set_PIN_Direction(u8 portNum ,u8 pinNum ,u8 Direction)
{
     772:	df 93       	push	r29
     774:	cf 93       	push	r28
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	2e 97       	sbiw	r28, 0x0e	; 14
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	f8 94       	cli
     780:	de bf       	out	0x3e, r29	; 62
     782:	0f be       	out	0x3f, r0	; 63
     784:	cd bf       	out	0x3d, r28	; 61
     786:	8a 83       	std	Y+2, r24	; 0x02
     788:	6b 83       	std	Y+3, r22	; 0x03
     78a:	4c 83       	std	Y+4, r20	; 0x04
	s8 State;

		State = OK;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	89 83       	std	Y+1, r24	; 0x01
	switch(portNum)
     790:	8a 81       	ldd	r24, Y+2	; 0x02
     792:	28 2f       	mov	r18, r24
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	3e 87       	std	Y+14, r19	; 0x0e
     798:	2d 87       	std	Y+13, r18	; 0x0d
     79a:	8d 85       	ldd	r24, Y+13	; 0x0d
     79c:	9e 85       	ldd	r25, Y+14	; 0x0e
     79e:	81 30       	cpi	r24, 0x01	; 1
     7a0:	91 05       	cpc	r25, r1
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <DIO_Set_PIN_Direction+0x34>
     7a4:	51 c0       	rjmp	.+162    	; 0x848 <DIO_Set_PIN_Direction+0xd6>
     7a6:	2d 85       	ldd	r18, Y+13	; 0x0d
     7a8:	3e 85       	ldd	r19, Y+14	; 0x0e
     7aa:	22 30       	cpi	r18, 0x02	; 2
     7ac:	31 05       	cpc	r19, r1
     7ae:	2c f4       	brge	.+10     	; 0x7ba <DIO_Set_PIN_Direction+0x48>
     7b0:	8d 85       	ldd	r24, Y+13	; 0x0d
     7b2:	9e 85       	ldd	r25, Y+14	; 0x0e
     7b4:	00 97       	sbiw	r24, 0x00	; 0
     7b6:	71 f0       	breq	.+28     	; 0x7d4 <DIO_Set_PIN_Direction+0x62>
     7b8:	f5 c0       	rjmp	.+490    	; 0x9a4 <__stack+0x145>
     7ba:	2d 85       	ldd	r18, Y+13	; 0x0d
     7bc:	3e 85       	ldd	r19, Y+14	; 0x0e
     7be:	22 30       	cpi	r18, 0x02	; 2
     7c0:	31 05       	cpc	r19, r1
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <DIO_Set_PIN_Direction+0x54>
     7c4:	7b c0       	rjmp	.+246    	; 0x8bc <__stack+0x5d>
     7c6:	8d 85       	ldd	r24, Y+13	; 0x0d
     7c8:	9e 85       	ldd	r25, Y+14	; 0x0e
     7ca:	83 30       	cpi	r24, 0x03	; 3
     7cc:	91 05       	cpc	r25, r1
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <DIO_Set_PIN_Direction+0x60>
     7d0:	af c0       	rjmp	.+350    	; 0x930 <__stack+0xd1>
     7d2:	e8 c0       	rjmp	.+464    	; 0x9a4 <__stack+0x145>
		{
		case PortA_Num :
			switch(Direction)
     7d4:	8c 81       	ldd	r24, Y+4	; 0x04
     7d6:	28 2f       	mov	r18, r24
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	3c 87       	std	Y+12, r19	; 0x0c
     7dc:	2b 87       	std	Y+11, r18	; 0x0b
     7de:	8b 85       	ldd	r24, Y+11	; 0x0b
     7e0:	9c 85       	ldd	r25, Y+12	; 0x0c
     7e2:	00 97       	sbiw	r24, 0x00	; 0
     7e4:	31 f0       	breq	.+12     	; 0x7f2 <DIO_Set_PIN_Direction+0x80>
     7e6:	2b 85       	ldd	r18, Y+11	; 0x0b
     7e8:	3c 85       	ldd	r19, Y+12	; 0x0c
     7ea:	21 30       	cpi	r18, 0x01	; 1
     7ec:	31 05       	cpc	r19, r1
     7ee:	b1 f0       	breq	.+44     	; 0x81c <DIO_Set_PIN_Direction+0xaa>
     7f0:	29 c0       	rjmp	.+82     	; 0x844 <DIO_Set_PIN_Direction+0xd2>
			{
				case INPUT:
					bitclear(DDRA,pinNum);
     7f2:	aa e3       	ldi	r26, 0x3A	; 58
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	ea e3       	ldi	r30, 0x3A	; 58
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	48 2f       	mov	r20, r24
     7fe:	8b 81       	ldd	r24, Y+3	; 0x03
     800:	28 2f       	mov	r18, r24
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	02 2e       	mov	r0, r18
     80a:	02 c0       	rjmp	.+4      	; 0x810 <DIO_Set_PIN_Direction+0x9e>
     80c:	88 0f       	add	r24, r24
     80e:	99 1f       	adc	r25, r25
     810:	0a 94       	dec	r0
     812:	e2 f7       	brpl	.-8      	; 0x80c <DIO_Set_PIN_Direction+0x9a>
     814:	80 95       	com	r24
     816:	84 23       	and	r24, r20
     818:	8c 93       	st	X, r24
     81a:	c5 c0       	rjmp	.+394    	; 0x9a6 <__stack+0x147>

					break;
				case OUTPUT:
					bitset(DDRA,pinNum);
     81c:	aa e3       	ldi	r26, 0x3A	; 58
     81e:	b0 e0       	ldi	r27, 0x00	; 0
     820:	ea e3       	ldi	r30, 0x3A	; 58
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	48 2f       	mov	r20, r24
     828:	8b 81       	ldd	r24, Y+3	; 0x03
     82a:	28 2f       	mov	r18, r24
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	02 2e       	mov	r0, r18
     834:	02 c0       	rjmp	.+4      	; 0x83a <DIO_Set_PIN_Direction+0xc8>
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
     83a:	0a 94       	dec	r0
     83c:	e2 f7       	brpl	.-8      	; 0x836 <DIO_Set_PIN_Direction+0xc4>
     83e:	84 2b       	or	r24, r20
     840:	8c 93       	st	X, r24
     842:	b1 c0       	rjmp	.+354    	; 0x9a6 <__stack+0x147>
					break;
				default:
					State = Not_OK;
     844:	19 82       	std	Y+1, r1	; 0x01
     846:	af c0       	rjmp	.+350    	; 0x9a6 <__stack+0x147>
					break;
				}
				break;
		case PortB_Num:
				switch(Direction)
     848:	8c 81       	ldd	r24, Y+4	; 0x04
     84a:	28 2f       	mov	r18, r24
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	3a 87       	std	Y+10, r19	; 0x0a
     850:	29 87       	std	Y+9, r18	; 0x09
     852:	89 85       	ldd	r24, Y+9	; 0x09
     854:	9a 85       	ldd	r25, Y+10	; 0x0a
     856:	00 97       	sbiw	r24, 0x00	; 0
     858:	31 f0       	breq	.+12     	; 0x866 <__stack+0x7>
     85a:	29 85       	ldd	r18, Y+9	; 0x09
     85c:	3a 85       	ldd	r19, Y+10	; 0x0a
     85e:	21 30       	cpi	r18, 0x01	; 1
     860:	31 05       	cpc	r19, r1
     862:	b1 f0       	breq	.+44     	; 0x890 <__stack+0x31>
     864:	29 c0       	rjmp	.+82     	; 0x8b8 <__stack+0x59>
				{
				case INPUT:
					bitclear(DDRB,pinNum);
     866:	a7 e3       	ldi	r26, 0x37	; 55
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	e7 e3       	ldi	r30, 0x37	; 55
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	48 2f       	mov	r20, r24
     872:	8b 81       	ldd	r24, Y+3	; 0x03
     874:	28 2f       	mov	r18, r24
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	02 2e       	mov	r0, r18
     87e:	02 c0       	rjmp	.+4      	; 0x884 <__stack+0x25>
     880:	88 0f       	add	r24, r24
     882:	99 1f       	adc	r25, r25
     884:	0a 94       	dec	r0
     886:	e2 f7       	brpl	.-8      	; 0x880 <__stack+0x21>
     888:	80 95       	com	r24
     88a:	84 23       	and	r24, r20
     88c:	8c 93       	st	X, r24
     88e:	8b c0       	rjmp	.+278    	; 0x9a6 <__stack+0x147>
					break;
				case OUTPUT:
					bitset(DDRB,pinNum);
     890:	a7 e3       	ldi	r26, 0x37	; 55
     892:	b0 e0       	ldi	r27, 0x00	; 0
     894:	e7 e3       	ldi	r30, 0x37	; 55
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	48 2f       	mov	r20, r24
     89c:	8b 81       	ldd	r24, Y+3	; 0x03
     89e:	28 2f       	mov	r18, r24
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	02 2e       	mov	r0, r18
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <__stack+0x4f>
     8aa:	88 0f       	add	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	0a 94       	dec	r0
     8b0:	e2 f7       	brpl	.-8      	; 0x8aa <__stack+0x4b>
     8b2:	84 2b       	or	r24, r20
     8b4:	8c 93       	st	X, r24
     8b6:	77 c0       	rjmp	.+238    	; 0x9a6 <__stack+0x147>
					break;
				default:
					State = Not_OK;
     8b8:	19 82       	std	Y+1, r1	; 0x01
     8ba:	75 c0       	rjmp	.+234    	; 0x9a6 <__stack+0x147>
					break;
				}
				break;
		case PortC_Num:
			switch(Direction)
     8bc:	8c 81       	ldd	r24, Y+4	; 0x04
     8be:	28 2f       	mov	r18, r24
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	38 87       	std	Y+8, r19	; 0x08
     8c4:	2f 83       	std	Y+7, r18	; 0x07
     8c6:	8f 81       	ldd	r24, Y+7	; 0x07
     8c8:	98 85       	ldd	r25, Y+8	; 0x08
     8ca:	00 97       	sbiw	r24, 0x00	; 0
     8cc:	31 f0       	breq	.+12     	; 0x8da <__stack+0x7b>
     8ce:	2f 81       	ldd	r18, Y+7	; 0x07
     8d0:	38 85       	ldd	r19, Y+8	; 0x08
     8d2:	21 30       	cpi	r18, 0x01	; 1
     8d4:	31 05       	cpc	r19, r1
     8d6:	b1 f0       	breq	.+44     	; 0x904 <__stack+0xa5>
     8d8:	29 c0       	rjmp	.+82     	; 0x92c <__stack+0xcd>
			{
			case INPUT:
				bitclear(DDRC,pinNum);
     8da:	a4 e3       	ldi	r26, 0x34	; 52
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
     8de:	e4 e3       	ldi	r30, 0x34	; 52
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	48 2f       	mov	r20, r24
     8e6:	8b 81       	ldd	r24, Y+3	; 0x03
     8e8:	28 2f       	mov	r18, r24
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	02 2e       	mov	r0, r18
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	88 0f       	add	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	0a 94       	dec	r0
     8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <__stack+0x95>
     8fc:	80 95       	com	r24
     8fe:	84 23       	and	r24, r20
     900:	8c 93       	st	X, r24
     902:	51 c0       	rjmp	.+162    	; 0x9a6 <__stack+0x147>
				break;
			case OUTPUT:
				bitset(DDRC,pinNum);
     904:	a4 e3       	ldi	r26, 0x34	; 52
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	e4 e3       	ldi	r30, 0x34	; 52
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	80 81       	ld	r24, Z
     90e:	48 2f       	mov	r20, r24
     910:	8b 81       	ldd	r24, Y+3	; 0x03
     912:	28 2f       	mov	r18, r24
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	02 2e       	mov	r0, r18
     91c:	02 c0       	rjmp	.+4      	; 0x922 <__stack+0xc3>
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	0a 94       	dec	r0
     924:	e2 f7       	brpl	.-8      	; 0x91e <__stack+0xbf>
     926:	84 2b       	or	r24, r20
     928:	8c 93       	st	X, r24
     92a:	3d c0       	rjmp	.+122    	; 0x9a6 <__stack+0x147>
				break;
			default:
				State = Not_OK;
     92c:	19 82       	std	Y+1, r1	; 0x01
     92e:	3b c0       	rjmp	.+118    	; 0x9a6 <__stack+0x147>
				break;
			}
			break;
		case PortD_Num:
			switch(Direction)
     930:	8c 81       	ldd	r24, Y+4	; 0x04
     932:	28 2f       	mov	r18, r24
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	3e 83       	std	Y+6, r19	; 0x06
     938:	2d 83       	std	Y+5, r18	; 0x05
     93a:	8d 81       	ldd	r24, Y+5	; 0x05
     93c:	9e 81       	ldd	r25, Y+6	; 0x06
     93e:	00 97       	sbiw	r24, 0x00	; 0
     940:	31 f0       	breq	.+12     	; 0x94e <__stack+0xef>
     942:	2d 81       	ldd	r18, Y+5	; 0x05
     944:	3e 81       	ldd	r19, Y+6	; 0x06
     946:	21 30       	cpi	r18, 0x01	; 1
     948:	31 05       	cpc	r19, r1
     94a:	b1 f0       	breq	.+44     	; 0x978 <__stack+0x119>
     94c:	29 c0       	rjmp	.+82     	; 0x9a0 <__stack+0x141>
			{
			case INPUT:
				bitclear(DDRD,pinNum);
     94e:	a1 e3       	ldi	r26, 0x31	; 49
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	e1 e3       	ldi	r30, 0x31	; 49
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	80 81       	ld	r24, Z
     958:	48 2f       	mov	r20, r24
     95a:	8b 81       	ldd	r24, Y+3	; 0x03
     95c:	28 2f       	mov	r18, r24
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	02 2e       	mov	r0, r18
     966:	02 c0       	rjmp	.+4      	; 0x96c <__stack+0x10d>
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	0a 94       	dec	r0
     96e:	e2 f7       	brpl	.-8      	; 0x968 <__stack+0x109>
     970:	80 95       	com	r24
     972:	84 23       	and	r24, r20
     974:	8c 93       	st	X, r24
     976:	17 c0       	rjmp	.+46     	; 0x9a6 <__stack+0x147>
				break;
			case OUTPUT:
				bitset(DDRD,pinNum);
     978:	a1 e3       	ldi	r26, 0x31	; 49
     97a:	b0 e0       	ldi	r27, 0x00	; 0
     97c:	e1 e3       	ldi	r30, 0x31	; 49
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 81       	ld	r24, Z
     982:	48 2f       	mov	r20, r24
     984:	8b 81       	ldd	r24, Y+3	; 0x03
     986:	28 2f       	mov	r18, r24
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	02 2e       	mov	r0, r18
     990:	02 c0       	rjmp	.+4      	; 0x996 <__stack+0x137>
     992:	88 0f       	add	r24, r24
     994:	99 1f       	adc	r25, r25
     996:	0a 94       	dec	r0
     998:	e2 f7       	brpl	.-8      	; 0x992 <__stack+0x133>
     99a:	84 2b       	or	r24, r20
     99c:	8c 93       	st	X, r24
     99e:	03 c0       	rjmp	.+6      	; 0x9a6 <__stack+0x147>
				break;
			default:
				State = Not_OK;
     9a0:	19 82       	std	Y+1, r1	; 0x01
     9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <__stack+0x147>
				break;
			}
			break;
			default:
				State = Not_OK;
     9a4:	19 82       	std	Y+1, r1	; 0x01

}

		return(State);
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
	}
     9a8:	2e 96       	adiw	r28, 0x0e	; 14
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
     9b4:	cf 91       	pop	r28
     9b6:	df 91       	pop	r29
     9b8:	08 95       	ret

000009ba <DIO_Set_PORT_Value>:

u8 DIO_Set_PORT_Value(u8 portNum , u8 Value)
{
     9ba:	df 93       	push	r29
     9bc:	cf 93       	push	r28
     9be:	00 d0       	rcall	.+0      	; 0x9c0 <DIO_Set_PORT_Value+0x6>
     9c0:	00 d0       	rcall	.+0      	; 0x9c2 <DIO_Set_PORT_Value+0x8>
     9c2:	0f 92       	push	r0
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	8a 83       	std	Y+2, r24	; 0x02
     9ca:	6b 83       	std	Y+3, r22	; 0x03
	s8 State;

	State = OK;
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	89 83       	std	Y+1, r24	; 0x01
			switch(portNum)
     9d0:	8a 81       	ldd	r24, Y+2	; 0x02
     9d2:	28 2f       	mov	r18, r24
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	3d 83       	std	Y+5, r19	; 0x05
     9d8:	2c 83       	std	Y+4, r18	; 0x04
     9da:	8c 81       	ldd	r24, Y+4	; 0x04
     9dc:	9d 81       	ldd	r25, Y+5	; 0x05
     9de:	81 30       	cpi	r24, 0x01	; 1
     9e0:	91 05       	cpc	r25, r1
     9e2:	d1 f0       	breq	.+52     	; 0xa18 <DIO_Set_PORT_Value+0x5e>
     9e4:	2c 81       	ldd	r18, Y+4	; 0x04
     9e6:	3d 81       	ldd	r19, Y+5	; 0x05
     9e8:	22 30       	cpi	r18, 0x02	; 2
     9ea:	31 05       	cpc	r19, r1
     9ec:	2c f4       	brge	.+10     	; 0x9f8 <DIO_Set_PORT_Value+0x3e>
     9ee:	8c 81       	ldd	r24, Y+4	; 0x04
     9f0:	9d 81       	ldd	r25, Y+5	; 0x05
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	61 f0       	breq	.+24     	; 0xa0e <DIO_Set_PORT_Value+0x54>
     9f6:	1f c0       	rjmp	.+62     	; 0xa36 <DIO_Set_PORT_Value+0x7c>
     9f8:	2c 81       	ldd	r18, Y+4	; 0x04
     9fa:	3d 81       	ldd	r19, Y+5	; 0x05
     9fc:	22 30       	cpi	r18, 0x02	; 2
     9fe:	31 05       	cpc	r19, r1
     a00:	81 f0       	breq	.+32     	; 0xa22 <DIO_Set_PORT_Value+0x68>
     a02:	8c 81       	ldd	r24, Y+4	; 0x04
     a04:	9d 81       	ldd	r25, Y+5	; 0x05
     a06:	83 30       	cpi	r24, 0x03	; 3
     a08:	91 05       	cpc	r25, r1
     a0a:	81 f0       	breq	.+32     	; 0xa2c <DIO_Set_PORT_Value+0x72>
     a0c:	14 c0       	rjmp	.+40     	; 0xa36 <DIO_Set_PORT_Value+0x7c>
			{
			case PortA_Num :

			PORTA = Value;
     a0e:	eb e3       	ldi	r30, 0x3B	; 59
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	8b 81       	ldd	r24, Y+3	; 0x03
     a14:	80 83       	st	Z, r24
     a16:	10 c0       	rjmp	.+32     	; 0xa38 <DIO_Set_PORT_Value+0x7e>
			break;
			case PortB_Num:

			PORTB = Value;
     a18:	e8 e3       	ldi	r30, 0x38	; 56
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	8b 81       	ldd	r24, Y+3	; 0x03
     a1e:	80 83       	st	Z, r24
     a20:	0b c0       	rjmp	.+22     	; 0xa38 <DIO_Set_PORT_Value+0x7e>
					break;

			case PortC_Num:
			PORTC = Value;
     a22:	e5 e3       	ldi	r30, 0x35	; 53
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	8b 81       	ldd	r24, Y+3	; 0x03
     a28:	80 83       	st	Z, r24
     a2a:	06 c0       	rjmp	.+12     	; 0xa38 <DIO_Set_PORT_Value+0x7e>
			break;

			case PortD_Num:
			PORTD = Value;
     a2c:	e2 e3       	ldi	r30, 0x32	; 50
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	8b 81       	ldd	r24, Y+3	; 0x03
     a32:	80 83       	st	Z, r24
     a34:	01 c0       	rjmp	.+2      	; 0xa38 <DIO_Set_PORT_Value+0x7e>
			break;
			default:
			State = Not_OK;
     a36:	19 82       	std	Y+1, r1	; 0x01
			}

			return(State);
     a38:	89 81       	ldd	r24, Y+1	; 0x01
	}
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	cf 91       	pop	r28
     a46:	df 91       	pop	r29
     a48:	08 95       	ret

00000a4a <DIO_Set_PIN_Value>:

u8 DIO_Set_PIN_Value(u8 portNum ,u8 pinNum ,u8 Value)
{
     a4a:	df 93       	push	r29
     a4c:	cf 93       	push	r28
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	2e 97       	sbiw	r28, 0x0e	; 14
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
     a5e:	8a 83       	std	Y+2, r24	; 0x02
     a60:	6b 83       	std	Y+3, r22	; 0x03
     a62:	4c 83       	std	Y+4, r20	; 0x04
	s8 State;

		State = OK;
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	89 83       	std	Y+1, r24	; 0x01
		switch(portNum)
     a68:	8a 81       	ldd	r24, Y+2	; 0x02
     a6a:	28 2f       	mov	r18, r24
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	3e 87       	std	Y+14, r19	; 0x0e
     a70:	2d 87       	std	Y+13, r18	; 0x0d
     a72:	8d 85       	ldd	r24, Y+13	; 0x0d
     a74:	9e 85       	ldd	r25, Y+14	; 0x0e
     a76:	81 30       	cpi	r24, 0x01	; 1
     a78:	91 05       	cpc	r25, r1
     a7a:	09 f4       	brne	.+2      	; 0xa7e <DIO_Set_PIN_Value+0x34>
     a7c:	51 c0       	rjmp	.+162    	; 0xb20 <DIO_Set_PIN_Value+0xd6>
     a7e:	2d 85       	ldd	r18, Y+13	; 0x0d
     a80:	3e 85       	ldd	r19, Y+14	; 0x0e
     a82:	22 30       	cpi	r18, 0x02	; 2
     a84:	31 05       	cpc	r19, r1
     a86:	2c f4       	brge	.+10     	; 0xa92 <DIO_Set_PIN_Value+0x48>
     a88:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	71 f0       	breq	.+28     	; 0xaac <DIO_Set_PIN_Value+0x62>
     a90:	f5 c0       	rjmp	.+490    	; 0xc7c <DIO_Set_PIN_Value+0x232>
     a92:	2d 85       	ldd	r18, Y+13	; 0x0d
     a94:	3e 85       	ldd	r19, Y+14	; 0x0e
     a96:	22 30       	cpi	r18, 0x02	; 2
     a98:	31 05       	cpc	r19, r1
     a9a:	09 f4       	brne	.+2      	; 0xa9e <DIO_Set_PIN_Value+0x54>
     a9c:	7b c0       	rjmp	.+246    	; 0xb94 <DIO_Set_PIN_Value+0x14a>
     a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
     aa2:	83 30       	cpi	r24, 0x03	; 3
     aa4:	91 05       	cpc	r25, r1
     aa6:	09 f4       	brne	.+2      	; 0xaaa <DIO_Set_PIN_Value+0x60>
     aa8:	af c0       	rjmp	.+350    	; 0xc08 <DIO_Set_PIN_Value+0x1be>
     aaa:	e8 c0       	rjmp	.+464    	; 0xc7c <DIO_Set_PIN_Value+0x232>
		{
		case PortA_Num :
		switch(Value)
     aac:	8c 81       	ldd	r24, Y+4	; 0x04
     aae:	28 2f       	mov	r18, r24
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	3c 87       	std	Y+12, r19	; 0x0c
     ab4:	2b 87       	std	Y+11, r18	; 0x0b
     ab6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ab8:	9c 85       	ldd	r25, Y+12	; 0x0c
     aba:	00 97       	sbiw	r24, 0x00	; 0
     abc:	31 f0       	breq	.+12     	; 0xaca <DIO_Set_PIN_Value+0x80>
     abe:	2b 85       	ldd	r18, Y+11	; 0x0b
     ac0:	3c 85       	ldd	r19, Y+12	; 0x0c
     ac2:	21 30       	cpi	r18, 0x01	; 1
     ac4:	31 05       	cpc	r19, r1
     ac6:	b1 f0       	breq	.+44     	; 0xaf4 <DIO_Set_PIN_Value+0xaa>
     ac8:	29 c0       	rjmp	.+82     	; 0xb1c <DIO_Set_PIN_Value+0xd2>
		{
		case LOW:
		bitclear(PORTA,pinNum);
     aca:	ab e3       	ldi	r26, 0x3B	; 59
     acc:	b0 e0       	ldi	r27, 0x00	; 0
     ace:	eb e3       	ldi	r30, 0x3B	; 59
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	80 81       	ld	r24, Z
     ad4:	48 2f       	mov	r20, r24
     ad6:	8b 81       	ldd	r24, Y+3	; 0x03
     ad8:	28 2f       	mov	r18, r24
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	02 2e       	mov	r0, r18
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <DIO_Set_PIN_Value+0x9e>
     ae4:	88 0f       	add	r24, r24
     ae6:	99 1f       	adc	r25, r25
     ae8:	0a 94       	dec	r0
     aea:	e2 f7       	brpl	.-8      	; 0xae4 <DIO_Set_PIN_Value+0x9a>
     aec:	80 95       	com	r24
     aee:	84 23       	and	r24, r20
     af0:	8c 93       	st	X, r24
     af2:	c5 c0       	rjmp	.+394    	; 0xc7e <DIO_Set_PIN_Value+0x234>

		break;
		case HIGH:
		bitset(PORTA,pinNum);
     af4:	ab e3       	ldi	r26, 0x3B	; 59
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	eb e3       	ldi	r30, 0x3B	; 59
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	48 2f       	mov	r20, r24
     b00:	8b 81       	ldd	r24, Y+3	; 0x03
     b02:	28 2f       	mov	r18, r24
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	02 2e       	mov	r0, r18
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <DIO_Set_PIN_Value+0xc8>
     b0e:	88 0f       	add	r24, r24
     b10:	99 1f       	adc	r25, r25
     b12:	0a 94       	dec	r0
     b14:	e2 f7       	brpl	.-8      	; 0xb0e <DIO_Set_PIN_Value+0xc4>
     b16:	84 2b       	or	r24, r20
     b18:	8c 93       	st	X, r24
     b1a:	b1 c0       	rjmp	.+354    	; 0xc7e <DIO_Set_PIN_Value+0x234>
		break;
		default:
		State = Not_OK;
     b1c:	19 82       	std	Y+1, r1	; 0x01
     b1e:	af c0       	rjmp	.+350    	; 0xc7e <DIO_Set_PIN_Value+0x234>
		break;
		}
					break;
			case PortB_Num:
					switch(Value)
     b20:	8c 81       	ldd	r24, Y+4	; 0x04
     b22:	28 2f       	mov	r18, r24
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	3a 87       	std	Y+10, r19	; 0x0a
     b28:	29 87       	std	Y+9, r18	; 0x09
     b2a:	89 85       	ldd	r24, Y+9	; 0x09
     b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b2e:	00 97       	sbiw	r24, 0x00	; 0
     b30:	31 f0       	breq	.+12     	; 0xb3e <DIO_Set_PIN_Value+0xf4>
     b32:	29 85       	ldd	r18, Y+9	; 0x09
     b34:	3a 85       	ldd	r19, Y+10	; 0x0a
     b36:	21 30       	cpi	r18, 0x01	; 1
     b38:	31 05       	cpc	r19, r1
     b3a:	b1 f0       	breq	.+44     	; 0xb68 <DIO_Set_PIN_Value+0x11e>
     b3c:	29 c0       	rjmp	.+82     	; 0xb90 <DIO_Set_PIN_Value+0x146>
					{
					case LOW:
						bitclear(PORTB,pinNum);
     b3e:	a8 e3       	ldi	r26, 0x38	; 56
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e8 e3       	ldi	r30, 0x38	; 56
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	48 2f       	mov	r20, r24
     b4a:	8b 81       	ldd	r24, Y+3	; 0x03
     b4c:	28 2f       	mov	r18, r24
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	02 2e       	mov	r0, r18
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <DIO_Set_PIN_Value+0x112>
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	0a 94       	dec	r0
     b5e:	e2 f7       	brpl	.-8      	; 0xb58 <DIO_Set_PIN_Value+0x10e>
     b60:	80 95       	com	r24
     b62:	84 23       	and	r24, r20
     b64:	8c 93       	st	X, r24
     b66:	8b c0       	rjmp	.+278    	; 0xc7e <DIO_Set_PIN_Value+0x234>
						break;
					case HIGH:
						bitset(PORTB,pinNum);
     b68:	a8 e3       	ldi	r26, 0x38	; 56
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e8 e3       	ldi	r30, 0x38	; 56
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	48 2f       	mov	r20, r24
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	28 2f       	mov	r18, r24
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	02 2e       	mov	r0, r18
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <DIO_Set_PIN_Value+0x13c>
     b82:	88 0f       	add	r24, r24
     b84:	99 1f       	adc	r25, r25
     b86:	0a 94       	dec	r0
     b88:	e2 f7       	brpl	.-8      	; 0xb82 <DIO_Set_PIN_Value+0x138>
     b8a:	84 2b       	or	r24, r20
     b8c:	8c 93       	st	X, r24
     b8e:	77 c0       	rjmp	.+238    	; 0xc7e <DIO_Set_PIN_Value+0x234>
						break;
					default:
						State = Not_OK;
     b90:	19 82       	std	Y+1, r1	; 0x01
     b92:	75 c0       	rjmp	.+234    	; 0xc7e <DIO_Set_PIN_Value+0x234>
						break;
					}
					break;
			case PortC_Num:
				switch(Value)
     b94:	8c 81       	ldd	r24, Y+4	; 0x04
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	38 87       	std	Y+8, r19	; 0x08
     b9c:	2f 83       	std	Y+7, r18	; 0x07
     b9e:	8f 81       	ldd	r24, Y+7	; 0x07
     ba0:	98 85       	ldd	r25, Y+8	; 0x08
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	31 f0       	breq	.+12     	; 0xbb2 <DIO_Set_PIN_Value+0x168>
     ba6:	2f 81       	ldd	r18, Y+7	; 0x07
     ba8:	38 85       	ldd	r19, Y+8	; 0x08
     baa:	21 30       	cpi	r18, 0x01	; 1
     bac:	31 05       	cpc	r19, r1
     bae:	b1 f0       	breq	.+44     	; 0xbdc <DIO_Set_PIN_Value+0x192>
     bb0:	29 c0       	rjmp	.+82     	; 0xc04 <DIO_Set_PIN_Value+0x1ba>
				{
				case LOW:
					bitclear(PORTC,pinNum);
     bb2:	a5 e3       	ldi	r26, 0x35	; 53
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	e5 e3       	ldi	r30, 0x35	; 53
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	48 2f       	mov	r20, r24
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 2e       	mov	r0, r18
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <DIO_Set_PIN_Value+0x186>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <DIO_Set_PIN_Value+0x182>
     bd4:	80 95       	com	r24
     bd6:	84 23       	and	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	51 c0       	rjmp	.+162    	; 0xc7e <DIO_Set_PIN_Value+0x234>
					break;
				case HIGH:
					bitset(PORTC,pinNum);
     bdc:	a5 e3       	ldi	r26, 0x35	; 53
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e5 e3       	ldi	r30, 0x35	; 53
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_Set_PIN_Value+0x1b0>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_Set_PIN_Value+0x1ac>
     bfe:	84 2b       	or	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	3d c0       	rjmp	.+122    	; 0xc7e <DIO_Set_PIN_Value+0x234>
					break;
				default:
					State = Not_OK;
     c04:	19 82       	std	Y+1, r1	; 0x01
     c06:	3b c0       	rjmp	.+118    	; 0xc7e <DIO_Set_PIN_Value+0x234>
					break;
				}
				break;
			case PortD_Num:
				switch(Value)
     c08:	8c 81       	ldd	r24, Y+4	; 0x04
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	3e 83       	std	Y+6, r19	; 0x06
     c10:	2d 83       	std	Y+5, r18	; 0x05
     c12:	8d 81       	ldd	r24, Y+5	; 0x05
     c14:	9e 81       	ldd	r25, Y+6	; 0x06
     c16:	00 97       	sbiw	r24, 0x00	; 0
     c18:	31 f0       	breq	.+12     	; 0xc26 <DIO_Set_PIN_Value+0x1dc>
     c1a:	2d 81       	ldd	r18, Y+5	; 0x05
     c1c:	3e 81       	ldd	r19, Y+6	; 0x06
     c1e:	21 30       	cpi	r18, 0x01	; 1
     c20:	31 05       	cpc	r19, r1
     c22:	b1 f0       	breq	.+44     	; 0xc50 <DIO_Set_PIN_Value+0x206>
     c24:	29 c0       	rjmp	.+82     	; 0xc78 <DIO_Set_PIN_Value+0x22e>
				{
				case LOW:
					bitclear(PORTD,pinNum);
     c26:	a2 e3       	ldi	r26, 0x32	; 50
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e2 e3       	ldi	r30, 0x32	; 50
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	48 2f       	mov	r20, r24
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 2e       	mov	r0, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_Set_PIN_Value+0x1fa>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_Set_PIN_Value+0x1f6>
     c48:	80 95       	com	r24
     c4a:	84 23       	and	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	17 c0       	rjmp	.+46     	; 0xc7e <DIO_Set_PIN_Value+0x234>
					break;
				case HIGH:
					bitset(PORTD,pinNum);
     c50:	a2 e3       	ldi	r26, 0x32	; 50
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e2 e3       	ldi	r30, 0x32	; 50
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	48 2f       	mov	r20, r24
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	02 2e       	mov	r0, r18
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <DIO_Set_PIN_Value+0x224>
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	0a 94       	dec	r0
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <DIO_Set_PIN_Value+0x220>
     c72:	84 2b       	or	r24, r20
     c74:	8c 93       	st	X, r24
     c76:	03 c0       	rjmp	.+6      	; 0xc7e <DIO_Set_PIN_Value+0x234>
					break;
				default:
					State = Not_OK;
     c78:	19 82       	std	Y+1, r1	; 0x01
     c7a:	01 c0       	rjmp	.+2      	; 0xc7e <DIO_Set_PIN_Value+0x234>
					break;
				}
				break;
				default:
					State = Not_OK;
     c7c:	19 82       	std	Y+1, r1	; 0x01

	}

			return(State);
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
		}
     c80:	2e 96       	adiw	r28, 0x0e	; 14
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <DIO_get_PORT_Vlaue>:
u8 DIO_get_PORT_Vlaue(u8 portNum ,u8*Register_Reading)
{
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	00 d0       	rcall	.+0      	; 0xc98 <DIO_get_PORT_Vlaue+0x6>
     c98:	00 d0       	rcall	.+0      	; 0xc9a <DIO_get_PORT_Vlaue+0x8>
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <DIO_get_PORT_Vlaue+0xa>
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	8a 83       	std	Y+2, r24	; 0x02
     ca2:	7c 83       	std	Y+4, r23	; 0x04
     ca4:	6b 83       	std	Y+3, r22	; 0x03
	s8 State;


		switch(portNum)
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	3e 83       	std	Y+6, r19	; 0x06
     cae:	2d 83       	std	Y+5, r18	; 0x05
     cb0:	8d 81       	ldd	r24, Y+5	; 0x05
     cb2:	9e 81       	ldd	r25, Y+6	; 0x06
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	91 05       	cpc	r25, r1
     cb8:	e1 f0       	breq	.+56     	; 0xcf2 <DIO_get_PORT_Vlaue+0x60>
     cba:	2d 81       	ldd	r18, Y+5	; 0x05
     cbc:	3e 81       	ldd	r19, Y+6	; 0x06
     cbe:	22 30       	cpi	r18, 0x02	; 2
     cc0:	31 05       	cpc	r19, r1
     cc2:	2c f4       	brge	.+10     	; 0xcce <DIO_get_PORT_Vlaue+0x3c>
     cc4:	8d 81       	ldd	r24, Y+5	; 0x05
     cc6:	9e 81       	ldd	r25, Y+6	; 0x06
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	61 f0       	breq	.+24     	; 0xce4 <DIO_get_PORT_Vlaue+0x52>
     ccc:	27 c0       	rjmp	.+78     	; 0xd1c <DIO_get_PORT_Vlaue+0x8a>
     cce:	2d 81       	ldd	r18, Y+5	; 0x05
     cd0:	3e 81       	ldd	r19, Y+6	; 0x06
     cd2:	22 30       	cpi	r18, 0x02	; 2
     cd4:	31 05       	cpc	r19, r1
     cd6:	a1 f0       	breq	.+40     	; 0xd00 <DIO_get_PORT_Vlaue+0x6e>
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	9e 81       	ldd	r25, Y+6	; 0x06
     cdc:	83 30       	cpi	r24, 0x03	; 3
     cde:	91 05       	cpc	r25, r1
     ce0:	b1 f0       	breq	.+44     	; 0xd0e <DIO_get_PORT_Vlaue+0x7c>
     ce2:	1c c0       	rjmp	.+56     	; 0xd1c <DIO_get_PORT_Vlaue+0x8a>
		{
		case PortA_Num :

			*Register_Reading = PINA;
     ce4:	e9 e3       	ldi	r30, 0x39	; 57
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	eb 81       	ldd	r30, Y+3	; 0x03
     cec:	fc 81       	ldd	r31, Y+4	; 0x04
     cee:	80 83       	st	Z, r24
     cf0:	16 c0       	rjmp	.+44     	; 0xd1e <DIO_get_PORT_Vlaue+0x8c>
			break;
		case PortB_Num:

			*Register_Reading = PINB;
     cf2:	e6 e3       	ldi	r30, 0x36	; 54
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	eb 81       	ldd	r30, Y+3	; 0x03
     cfa:	fc 81       	ldd	r31, Y+4	; 0x04
     cfc:	80 83       	st	Z, r24
     cfe:	0f c0       	rjmp	.+30     	; 0xd1e <DIO_get_PORT_Vlaue+0x8c>
			break;

		case PortC_Num:
			*Register_Reading = PINC;
     d00:	e3 e3       	ldi	r30, 0x33	; 51
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	eb 81       	ldd	r30, Y+3	; 0x03
     d08:	fc 81       	ldd	r31, Y+4	; 0x04
     d0a:	80 83       	st	Z, r24
     d0c:	08 c0       	rjmp	.+16     	; 0xd1e <DIO_get_PORT_Vlaue+0x8c>
			break;

		case PortD_Num:
			*Register_Reading = PIND;
     d0e:	e0 e3       	ldi	r30, 0x30	; 48
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	eb 81       	ldd	r30, Y+3	; 0x03
     d16:	fc 81       	ldd	r31, Y+4	; 0x04
     d18:	80 83       	st	Z, r24
     d1a:	01 c0       	rjmp	.+2      	; 0xd1e <DIO_get_PORT_Vlaue+0x8c>
			break;
		default:
			State = Not_OK;
     d1c:	19 82       	std	Y+1, r1	; 0x01
		}

		return(State);
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d20:	26 96       	adiw	r28, 0x06	; 6
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <DIO_get_PIN_Vlaue>:

u8 DIO_get_PIN_Vlaue(u8 portNum ,u8 pinNum,u8*PIN_value)
{
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	27 97       	sbiw	r28, 0x07	; 7
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	8a 83       	std	Y+2, r24	; 0x02
     d48:	6b 83       	std	Y+3, r22	; 0x03
     d4a:	5d 83       	std	Y+5, r21	; 0x05
     d4c:	4c 83       	std	Y+4, r20	; 0x04
	s8 State;


		switch(portNum)
     d4e:	8a 81       	ldd	r24, Y+2	; 0x02
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	3f 83       	std	Y+7, r19	; 0x07
     d56:	2e 83       	std	Y+6, r18	; 0x06
     d58:	4e 81       	ldd	r20, Y+6	; 0x06
     d5a:	5f 81       	ldd	r21, Y+7	; 0x07
     d5c:	41 30       	cpi	r20, 0x01	; 1
     d5e:	51 05       	cpc	r21, r1
     d60:	c1 f1       	breq	.+112    	; 0xdd2 <DIO_get_PIN_Vlaue+0xa0>
     d62:	8e 81       	ldd	r24, Y+6	; 0x06
     d64:	9f 81       	ldd	r25, Y+7	; 0x07
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	91 05       	cpc	r25, r1
     d6a:	34 f4       	brge	.+12     	; 0xd78 <DIO_get_PIN_Vlaue+0x46>
     d6c:	2e 81       	ldd	r18, Y+6	; 0x06
     d6e:	3f 81       	ldd	r19, Y+7	; 0x07
     d70:	21 15       	cp	r18, r1
     d72:	31 05       	cpc	r19, r1
     d74:	71 f0       	breq	.+28     	; 0xd92 <DIO_get_PIN_Vlaue+0x60>
     d76:	8d c0       	rjmp	.+282    	; 0xe92 <DIO_get_PIN_Vlaue+0x160>
     d78:	4e 81       	ldd	r20, Y+6	; 0x06
     d7a:	5f 81       	ldd	r21, Y+7	; 0x07
     d7c:	42 30       	cpi	r20, 0x02	; 2
     d7e:	51 05       	cpc	r21, r1
     d80:	09 f4       	brne	.+2      	; 0xd84 <DIO_get_PIN_Vlaue+0x52>
     d82:	47 c0       	rjmp	.+142    	; 0xe12 <DIO_get_PIN_Vlaue+0xe0>
     d84:	8e 81       	ldd	r24, Y+6	; 0x06
     d86:	9f 81       	ldd	r25, Y+7	; 0x07
     d88:	83 30       	cpi	r24, 0x03	; 3
     d8a:	91 05       	cpc	r25, r1
     d8c:	09 f4       	brne	.+2      	; 0xd90 <DIO_get_PIN_Vlaue+0x5e>
     d8e:	61 c0       	rjmp	.+194    	; 0xe52 <DIO_get_PIN_Vlaue+0x120>
     d90:	80 c0       	rjmp	.+256    	; 0xe92 <DIO_get_PIN_Vlaue+0x160>
		{
		case PortA_Num :

			*PIN_value = 	Git_bit(PINA,pinNum);
     d92:	e9 e3       	ldi	r30, 0x39	; 57
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	50 e0       	ldi	r21, 0x00	; 0
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	02 c0       	rjmp	.+4      	; 0xdac <DIO_get_PIN_Vlaue+0x7a>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	2a 95       	dec	r18
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <DIO_get_PIN_Vlaue+0x76>
     db0:	9a 01       	movw	r18, r20
     db2:	28 23       	and	r18, r24
     db4:	39 23       	and	r19, r25
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	88 2f       	mov	r24, r24
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	a9 01       	movw	r20, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_get_PIN_Vlaue+0x92>
     dc0:	55 95       	asr	r21
     dc2:	47 95       	ror	r20
     dc4:	8a 95       	dec	r24
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_get_PIN_Vlaue+0x8e>
     dc8:	ca 01       	movw	r24, r20
     dca:	ec 81       	ldd	r30, Y+4	; 0x04
     dcc:	fd 81       	ldd	r31, Y+5	; 0x05
     dce:	80 83       	st	Z, r24
     dd0:	61 c0       	rjmp	.+194    	; 0xe94 <DIO_get_PIN_Vlaue+0x162>
			break;
		case PortB_Num:

			*PIN_value = 	Git_bit(PINB,pinNum);
     dd2:	e6 e3       	ldi	r30, 0x36	; 54
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 c0       	rjmp	.+4      	; 0xdec <DIO_get_PIN_Vlaue+0xba>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	2a 95       	dec	r18
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <DIO_get_PIN_Vlaue+0xb6>
     df0:	9a 01       	movw	r18, r20
     df2:	28 23       	and	r18, r24
     df4:	39 23       	and	r19, r25
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	a9 01       	movw	r20, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_get_PIN_Vlaue+0xd2>
     e00:	55 95       	asr	r21
     e02:	47 95       	ror	r20
     e04:	8a 95       	dec	r24
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_get_PIN_Vlaue+0xce>
     e08:	ca 01       	movw	r24, r20
     e0a:	ec 81       	ldd	r30, Y+4	; 0x04
     e0c:	fd 81       	ldd	r31, Y+5	; 0x05
     e0e:	80 83       	st	Z, r24
     e10:	41 c0       	rjmp	.+130    	; 0xe94 <DIO_get_PIN_Vlaue+0x162>
			break;

		case PortC_Num:
			*PIN_value = 	Git_bit(PINC,pinNum);
     e12:	e3 e3       	ldi	r30, 0x33	; 51
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	50 e0       	ldi	r21, 0x00	; 0
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_get_PIN_Vlaue+0xfa>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	2a 95       	dec	r18
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_get_PIN_Vlaue+0xf6>
     e30:	9a 01       	movw	r18, r20
     e32:	28 23       	and	r18, r24
     e34:	39 23       	and	r19, r25
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	88 2f       	mov	r24, r24
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	a9 01       	movw	r20, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_get_PIN_Vlaue+0x112>
     e40:	55 95       	asr	r21
     e42:	47 95       	ror	r20
     e44:	8a 95       	dec	r24
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_get_PIN_Vlaue+0x10e>
     e48:	ca 01       	movw	r24, r20
     e4a:	ec 81       	ldd	r30, Y+4	; 0x04
     e4c:	fd 81       	ldd	r31, Y+5	; 0x05
     e4e:	80 83       	st	Z, r24
     e50:	21 c0       	rjmp	.+66     	; 0xe94 <DIO_get_PIN_Vlaue+0x162>
			break;

		case PortD_Num:
			*PIN_value = 	Git_bit(PIND,pinNum);
     e52:	e0 e3       	ldi	r30, 0x30	; 48
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_get_PIN_Vlaue+0x13a>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	2a 95       	dec	r18
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_get_PIN_Vlaue+0x136>
     e70:	9a 01       	movw	r18, r20
     e72:	28 23       	and	r18, r24
     e74:	39 23       	and	r19, r25
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	88 2f       	mov	r24, r24
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	a9 01       	movw	r20, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_get_PIN_Vlaue+0x152>
     e80:	55 95       	asr	r21
     e82:	47 95       	ror	r20
     e84:	8a 95       	dec	r24
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_get_PIN_Vlaue+0x14e>
     e88:	ca 01       	movw	r24, r20
     e8a:	ec 81       	ldd	r30, Y+4	; 0x04
     e8c:	fd 81       	ldd	r31, Y+5	; 0x05
     e8e:	80 83       	st	Z, r24
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <DIO_get_PIN_Vlaue+0x162>
			break;
		default:
			State = Not_OK;
     e92:	19 82       	std	Y+1, r1	; 0x01
		}

		return(State);
     e94:	89 81       	ldd	r24, Y+1	; 0x01
}
     e96:	27 96       	adiw	r28, 0x07	; 7
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <callbachfn>:

}*/
ADCvalues myadcvalues;
flag;
void callbachfn(ADCvalues adcvalues)
{myadcvalues=adcvalues;
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	2d 97       	sbiw	r28, 0x0d	; 13
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	29 83       	std	Y+1, r18	; 0x01
     ebe:	3a 83       	std	Y+2, r19	; 0x02
     ec0:	4b 83       	std	Y+3, r20	; 0x03
     ec2:	5c 83       	std	Y+4, r21	; 0x04
     ec4:	6d 83       	std	Y+5, r22	; 0x05
     ec6:	7e 83       	std	Y+6, r23	; 0x06
     ec8:	8f 83       	std	Y+7, r24	; 0x07
     eca:	98 87       	std	Y+8, r25	; 0x08
     ecc:	89 e7       	ldi	r24, 0x79	; 121
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9a 87       	std	Y+10, r25	; 0x0a
     ed2:	89 87       	std	Y+9, r24	; 0x09
     ed4:	fe 01       	movw	r30, r28
     ed6:	31 96       	adiw	r30, 0x01	; 1
     ed8:	fc 87       	std	Y+12, r31	; 0x0c
     eda:	eb 87       	std	Y+11, r30	; 0x0b
     edc:	f8 e0       	ldi	r31, 0x08	; 8
     ede:	fd 87       	std	Y+13, r31	; 0x0d
     ee0:	eb 85       	ldd	r30, Y+11	; 0x0b
     ee2:	fc 85       	ldd	r31, Y+12	; 0x0c
     ee4:	00 80       	ld	r0, Z
     ee6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ee8:	9c 85       	ldd	r25, Y+12	; 0x0c
     eea:	01 96       	adiw	r24, 0x01	; 1
     eec:	9c 87       	std	Y+12, r25	; 0x0c
     eee:	8b 87       	std	Y+11, r24	; 0x0b
     ef0:	e9 85       	ldd	r30, Y+9	; 0x09
     ef2:	fa 85       	ldd	r31, Y+10	; 0x0a
     ef4:	00 82       	st	Z, r0
     ef6:	89 85       	ldd	r24, Y+9	; 0x09
     ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	9a 87       	std	Y+10, r25	; 0x0a
     efe:	89 87       	std	Y+9, r24	; 0x09
     f00:	9d 85       	ldd	r25, Y+13	; 0x0d
     f02:	91 50       	subi	r25, 0x01	; 1
     f04:	9d 87       	std	Y+13, r25	; 0x0d
     f06:	ed 85       	ldd	r30, Y+13	; 0x0d
     f08:	ee 23       	and	r30, r30
     f0a:	51 f7       	brne	.-44     	; 0xee0 <callbachfn+0x38>
flag=1;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	90 93 78 00 	sts	0x0078, r25
     f14:	80 93 77 00 	sts	0x0077, r24
	}
     f18:	2d 96       	adiw	r28, 0x0d	; 13
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <main>:
void main (void)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
	ADC_init();
     f32:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>

	flag = 0 ;
     f36:	10 92 78 00 	sts	0x0078, r1
     f3a:	10 92 77 00 	sts	0x0077, r1
	while(1)
	{
		ADC_FreeR(callbachfn);
     f3e:	84 e5       	ldi	r24, 0x54	; 84
     f40:	97 e0       	ldi	r25, 0x07	; 7
     f42:	0e 94 87 00 	call	0x10e	; 0x10e <ADC_FreeR>

	    GIE_enable();
     f46:	af e5       	ldi	r26, 0x5F	; 95
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	ef e5       	ldi	r30, 0x5F	; 95
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	80 68       	ori	r24, 0x80	; 128
     f52:	8c 93       	st	X, r24

		DIO_Set_PIN_Direction(PortA_Num,PIN_0,INPUT);
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	40 e0       	ldi	r20, 0x00	; 0
     f5a:	0e 94 b9 03 	call	0x772	; 0x772 <DIO_Set_PIN_Direction>


		DIO_Set_PIN_Direction(PortD_Num,PIN_5,OUTPUT);
     f5e:	83 e0       	ldi	r24, 0x03	; 3
     f60:	65 e0       	ldi	r22, 0x05	; 5
     f62:	41 e0       	ldi	r20, 0x01	; 1
     f64:	0e 94 b9 03 	call	0x772	; 0x772 <DIO_Set_PIN_Direction>
		DIO_Set_PIN_Direction(PortD_Num,PIN_6,OUTPUT);
     f68:	83 e0       	ldi	r24, 0x03	; 3
     f6a:	66 e0       	ldi	r22, 0x06	; 6
     f6c:	41 e0       	ldi	r20, 0x01	; 1
     f6e:	0e 94 b9 03 	call	0x772	; 0x772 <DIO_Set_PIN_Direction>
		DIO_Set_PIN_Direction(PortD_Num,PIN_7,OUTPUT);
     f72:	83 e0       	ldi	r24, 0x03	; 3
     f74:	67 e0       	ldi	r22, 0x07	; 7
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	0e 94 b9 03 	call	0x772	; 0x772 <DIO_Set_PIN_Direction>




			if(myadcvalues.value0<=50)
     f7c:	80 91 79 00 	lds	r24, 0x0079
     f80:	90 91 7a 00 	lds	r25, 0x007A
     f84:	83 33       	cpi	r24, 0x33	; 51
     f86:	91 05       	cpc	r25, r1
     f88:	80 f4       	brcc	.+32     	; 0xfaa <main+0x80>
			{
				DIO_Set_PIN_Value(PortD_Num,PIN_5,HIGH);
     f8a:	83 e0       	ldi	r24, 0x03	; 3
     f8c:	65 e0       	ldi	r22, 0x05	; 5
     f8e:	41 e0       	ldi	r20, 0x01	; 1
     f90:	0e 94 25 05 	call	0xa4a	; 0xa4a <DIO_Set_PIN_Value>
				DIO_Set_PIN_Value(PortD_Num,PIN_6,LOW);
     f94:	83 e0       	ldi	r24, 0x03	; 3
     f96:	66 e0       	ldi	r22, 0x06	; 6
     f98:	40 e0       	ldi	r20, 0x00	; 0
     f9a:	0e 94 25 05 	call	0xa4a	; 0xa4a <DIO_Set_PIN_Value>
				DIO_Set_PIN_Value(PortD_Num,PIN_7,LOW);
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	67 e0       	ldi	r22, 0x07	; 7
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	0e 94 25 05 	call	0xa4a	; 0xa4a <DIO_Set_PIN_Value>
     fa8:	ca cf       	rjmp	.-108    	; 0xf3e <main+0x14>


			}
			else if (myadcvalues.value0>50 && myadcvalues.value0<=100)
     faa:	80 91 79 00 	lds	r24, 0x0079
     fae:	90 91 7a 00 	lds	r25, 0x007A
     fb2:	83 33       	cpi	r24, 0x33	; 51
     fb4:	91 05       	cpc	r25, r1
     fb6:	b8 f0       	brcs	.+46     	; 0xfe6 <main+0xbc>
     fb8:	80 91 79 00 	lds	r24, 0x0079
     fbc:	90 91 7a 00 	lds	r25, 0x007A
     fc0:	85 36       	cpi	r24, 0x65	; 101
     fc2:	91 05       	cpc	r25, r1
     fc4:	80 f4       	brcc	.+32     	; 0xfe6 <main+0xbc>
			{

				DIO_Set_PIN_Value(PortD_Num,PIN_5,LOW);
     fc6:	83 e0       	ldi	r24, 0x03	; 3
     fc8:	65 e0       	ldi	r22, 0x05	; 5
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	0e 94 25 05 	call	0xa4a	; 0xa4a <DIO_Set_PIN_Value>
				DIO_Set_PIN_Value(PortD_Num,PIN_6,HIGH);
     fd0:	83 e0       	ldi	r24, 0x03	; 3
     fd2:	66 e0       	ldi	r22, 0x06	; 6
     fd4:	41 e0       	ldi	r20, 0x01	; 1
     fd6:	0e 94 25 05 	call	0xa4a	; 0xa4a <DIO_Set_PIN_Value>
				DIO_Set_PIN_Value(PortD_Num,PIN_7,LOW);
     fda:	83 e0       	ldi	r24, 0x03	; 3
     fdc:	67 e0       	ldi	r22, 0x07	; 7
     fde:	40 e0       	ldi	r20, 0x00	; 0
     fe0:	0e 94 25 05 	call	0xa4a	; 0xa4a <DIO_Set_PIN_Value>
     fe4:	ac cf       	rjmp	.-168    	; 0xf3e <main+0x14>
			}
			else
			{
				DIO_Set_PIN_Value(PortD_Num,PIN_5,LOW);
     fe6:	83 e0       	ldi	r24, 0x03	; 3
     fe8:	65 e0       	ldi	r22, 0x05	; 5
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	0e 94 25 05 	call	0xa4a	; 0xa4a <DIO_Set_PIN_Value>
				DIO_Set_PIN_Value(PortD_Num,PIN_6,LOW);
     ff0:	83 e0       	ldi	r24, 0x03	; 3
     ff2:	66 e0       	ldi	r22, 0x06	; 6
     ff4:	40 e0       	ldi	r20, 0x00	; 0
     ff6:	0e 94 25 05 	call	0xa4a	; 0xa4a <DIO_Set_PIN_Value>
				DIO_Set_PIN_Value(PortD_Num,PIN_7,HIGH);
     ffa:	83 e0       	ldi	r24, 0x03	; 3
     ffc:	67 e0       	ldi	r22, 0x07	; 7
     ffe:	41 e0       	ldi	r20, 0x01	; 1
    1000:	0e 94 25 05 	call	0xa4a	; 0xa4a <DIO_Set_PIN_Value>
    1004:	9c cf       	rjmp	.-200    	; 0xf3e <main+0x14>

00001006 <_exit>:
    1006:	f8 94       	cli

00001008 <__stop_program>:
    1008:	ff cf       	rjmp	.-2      	; 0x1008 <__stop_program>
