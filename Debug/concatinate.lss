
concatinate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001f48  00001fdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800070  00800070  00001fec  2**0
                  ALLOC
  3 .stab         0000174c  00000000  00000000  00001fec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e48  00000000  00000000  00003738  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000046c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004830  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006479  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007364  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008114  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008274  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008501  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008ccf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <main>
      8a:	0c 94 a2 0f 	jmp	0x1f44	; 0x1f44 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_init>:
/* Inputs : void														 			                     */
/* 																								         */
/* Outputs: void																	                     */

void ADC_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	digitalVal=0 ;
     b4e:	10 92 7a 00 	sts	0x007A, r1
     b52:	10 92 79 00 	sts	0x0079, r1

	ADCvals.value0=INVALID_VALUE;
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	9f ef       	ldi	r25, 0xFF	; 255
     b5a:	90 93 72 00 	sts	0x0072, r25
     b5e:	80 93 71 00 	sts	0x0071, r24
	ADCvals.value1=INVALID_VALUE;
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	9f ef       	ldi	r25, 0xFF	; 255
     b66:	90 93 74 00 	sts	0x0074, r25
     b6a:	80 93 73 00 	sts	0x0073, r24
	ADCvals.value2=INVALID_VALUE;
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	9f ef       	ldi	r25, 0xFF	; 255
     b72:	90 93 76 00 	sts	0x0076, r25
     b76:	80 93 75 00 	sts	0x0075, r24
	ADCvals.value3=INVALID_VALUE;
     b7a:	8f ef       	ldi	r24, 0xFF	; 255
     b7c:	9f ef       	ldi	r25, 0xFF	; 255
     b7e:	90 93 78 00 	sts	0x0078, r25
     b82:	80 93 77 00 	sts	0x0077, r24

/*********************************** Set ADC REF VOLTAGE**************************************************/
	ADC_setRefVoltage();
     b86:	0e 94 37 08 	call	0x106e	; 0x106e <ADC_setRefVoltage>
/**************************************** Set ADC CLOCK FREQ**********************************************/
	ADC_setFrequency();
     b8a:	0e 94 4c 08 	call	0x1098	; 0x1098 <ADC_setFrequency>
/***************************************** Set ADC Resolution*********************************************/
	ADC_setResolution();
     b8e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <ADC_setResolution>
/**************************************  ADC Enable  *****************************************************/
bitset(ADCSRA,ADEN);
     b92:	a6 e2       	ldi	r26, 0x26	; 38
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e6 e2       	ldi	r30, 0x26	; 38
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	80 68       	ori	r24, 0x80	; 128
     b9e:	8c 93       	st	X, r24

}
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <ADC_syncronousStartConversion>:
/* Outputs: return of this function will be the error state if there is any error occur during the       */
/* conversion process the error state will be StatusNotOk , if not the error state will be StatusOk      */
/* so please check the error states first , digital value will be passed to the function  by address     */

error ADC_syncronousStartConversion(u8 channel , u16 * ptr_TodigitalVal)
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	00 d0       	rcall	.+0      	; 0xbac <ADC_syncronousStartConversion+0x6>
     bac:	00 d0       	rcall	.+0      	; 0xbae <ADC_syncronousStartConversion+0x8>
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <ADC_syncronousStartConversion+0xa>
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	8c 83       	std	Y+4, r24	; 0x04
     bb6:	7e 83       	std	Y+6, r23	; 0x06
     bb8:	6d 83       	std	Y+5, r22	; 0x05

/**********************************initialize of error Counter********************************************/
  u8 timeout = CountFull ;
     bba:	8f ef       	ldi	r24, 0xFF	; 255
     bbc:	8b 83       	std	Y+3, r24	; 0x03

/**********************************initialize of error status*********************************************/
  error ErrorStatus ;

/********************************* Set channel to be converted********************************************/
  ADMUX |= channel;
     bbe:	a7 e2       	ldi	r26, 0x27	; 39
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e7 e2       	ldi	r30, 0x27	; 39
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	90 81       	ld	r25, Z
     bc8:	8c 81       	ldd	r24, Y+4	; 0x04
     bca:	89 2b       	or	r24, r25
     bcc:	8c 93       	st	X, r24

/************************************** Start Conversion *************************************************/
  bitset(ADCSRA,ADSC);
     bce:	a6 e2       	ldi	r26, 0x26	; 38
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e6 e2       	ldi	r30, 0x26	; 38
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	80 64       	ori	r24, 0x40	; 64
     bda:	8c 93       	st	X, r24
     bdc:	03 c0       	rjmp	.+6      	; 0xbe4 <ADC_syncronousStartConversion+0x3e>

	}*/

  while ( (Git_bit(ADCSRA,ADIF)==0) && (timeout>0) )
  {
	  timeout-- ;
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	81 50       	subi	r24, 0x01	; 1
     be2:	8b 83       	std	Y+3, r24	; 0x03
			break ;
		}

	}*/

  while ( (Git_bit(ADCSRA,ADIF)==0) && (timeout>0) )
     be4:	e6 e2       	ldi	r30, 0x26	; 38
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	88 2f       	mov	r24, r24
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	80 71       	andi	r24, 0x10	; 16
     bf0:	90 70       	andi	r25, 0x00	; 0
     bf2:	95 95       	asr	r25
     bf4:	87 95       	ror	r24
     bf6:	95 95       	asr	r25
     bf8:	87 95       	ror	r24
     bfa:	95 95       	asr	r25
     bfc:	87 95       	ror	r24
     bfe:	95 95       	asr	r25
     c00:	87 95       	ror	r24
     c02:	00 97       	sbiw	r24, 0x00	; 0
     c04:	19 f4       	brne	.+6      	; 0xc0c <ADC_syncronousStartConversion+0x66>
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	88 23       	and	r24, r24
     c0a:	49 f7       	brne	.-46     	; 0xbde <ADC_syncronousStartConversion+0x38>
  {
	  timeout-- ;
  }

  /********************************** timeout=0 ->error **************************************************/
  if(timeout)
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	88 23       	and	r24, r24
     c10:	71 f0       	breq	.+28     	; 0xc2e <ADC_syncronousStartConversion+0x88>
	  /**************************** Return "digital value" ***********************************************/
	  switch (ADC_RESOLUTION)
	  {

	  case ADC_RESOLUTION_8_BIT :
		  * ptr_TodigitalVal=ADCH;
     c12:	e5 e2       	ldi	r30, 0x25	; 37
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	88 2f       	mov	r24, r24
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	ed 81       	ldd	r30, Y+5	; 0x05
     c1e:	fe 81       	ldd	r31, Y+6	; 0x06
     c20:	91 83       	std	Z+1, r25	; 0x01
     c22:	80 83       	st	Z, r24
		  * ptr_TodigitalVal=ADCH;
		  break;

	  }

	  ErrorStatus=StatusOk ;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <ADC_syncronousStartConversion+0x8c>


  else
  {
	  /****************************** error situation ***************************************************/
	  ErrorStatus=StatusNotOk ;
     c2e:	1a 82       	std	Y+2, r1	; 0x02
     c30:	19 82       	std	Y+1, r1	; 0x01
  }

  return ErrorStatus ;
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	9a 81       	ldd	r25, Y+2	; 0x02

}
     c36:	26 96       	adiw	r28, 0x06	; 6
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	cf 91       	pop	r28
     c44:	df 91       	pop	r29
     c46:	08 95       	ret

00000c48 <ADC_customizeFreeRunConversion>:
/*          void callbachfn(u16*pointer)                                                                 */
/*          {mypointer=pointer;}                                                                         */
/* 																								         */
/* Outputs: void	                                                                                     */
void ADC_customizeFreeRunConversion(void *ptrTofn(u16 *p))
{
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <ADC_customizeFreeRunConversion+0x6>
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
	Current_CH=0;
     c56:	10 92 7c 00 	sts	0x007C, r1
	Feature=Feature_customizeFreeRunConversion;
     c5a:	83 e0       	ldi	r24, 0x03	; 3
     c5c:	80 93 70 00 	sts	0x0070, r24
	ptrTofunction = ptrTofn;
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	9a 81       	ldd	r25, Y+2	; 0x02
     c64:	90 93 80 00 	sts	0x0080, r25
     c68:	80 93 7f 00 	sts	0x007F, r24
/********************************* Set channel to be converted********************************************/
	ADMUX |= Digitalvals[Current_CH];
     c6c:	a7 e2       	ldi	r26, 0x27	; 39
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e7 e2       	ldi	r30, 0x27	; 39
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	20 81       	ld	r18, Z
     c76:	80 91 7c 00 	lds	r24, 0x007C
     c7a:	88 2f       	mov	r24, r24
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	fc 01       	movw	r30, r24
     c84:	e8 59       	subi	r30, 0x98	; 152
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	80 81       	ld	r24, Z
     c8a:	91 81       	ldd	r25, Z+1	; 0x01
     c8c:	82 2b       	or	r24, r18
     c8e:	8c 93       	st	X, r24
/******************************* enable of ADC interrupt (PIE)********************************************/
	bitset(ADCSRA,ADIE);
     c90:	a6 e2       	ldi	r26, 0x26	; 38
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e6 e2       	ldi	r30, 0x26	; 38
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	88 60       	ori	r24, 0x08	; 8
     c9c:	8c 93       	st	X, r24
/************************************** Start Conversion *************************************************/
	bitset(ADCSRA,ADSC);
     c9e:	a6 e2       	ldi	r26, 0x26	; 38
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e6 e2       	ldi	r30, 0x26	; 38
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	80 64       	ori	r24, 0x40	; 64
     caa:	8c 93       	st	X, r24

}
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <ADC_freeRunConversion>:
/*          void callbachfn(ADCvalues adcvalues)                                                         */
/*          {myadcvalues=adcvalues;}                                                                     */
/* 																								         */
/* Outputs: void	                                                                                     */
void ADC_freeRunConversion(void *ptrTofn(ADCvalues))
{
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	00 d0       	rcall	.+0      	; 0xcbc <ADC_freeRunConversion+0x6>
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	9a 83       	std	Y+2, r25	; 0x02
     cc2:	89 83       	std	Y+1, r24	; 0x01
	Feature=Feature_freeRunConversion;
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	80 93 70 00 	sts	0x0070, r24
	ptrTocallbkfn = ptrTofn;
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	9a 81       	ldd	r25, Y+2	; 0x02
     cce:	90 93 7e 00 	sts	0x007E, r25
     cd2:	80 93 7d 00 	sts	0x007D, r24
	ADC_channel=CONVERSION_CHANNEL_0;
     cd6:	10 92 7b 00 	sts	0x007B, r1
/********************************* Set channel to be converted********************************************/
	ADMUX |= CONVERSION_CHANNEL_0;
     cda:	a7 e2       	ldi	r26, 0x27	; 39
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e7 e2       	ldi	r30, 0x27	; 39
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	8c 93       	st	X, r24
/******************************* enable of ADC interrupt (PIE)********************************************/
    bitset(ADCSRA,ADIE);
     ce6:	a6 e2       	ldi	r26, 0x26	; 38
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e6 e2       	ldi	r30, 0x26	; 38
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	88 60       	ori	r24, 0x08	; 8
     cf2:	8c 93       	st	X, r24
/************************************** Start Conversion *************************************************/
	bitset(ADCSRA,ADSC);
     cf4:	a6 e2       	ldi	r26, 0x26	; 38
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e6 e2       	ldi	r30, 0x26	; 38
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	80 64       	ori	r24, 0x40	; 64
     d00:	8c 93       	st	X, r24

}
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <asyncronousADC_startConversion>:
/*  	    						 			                                                         */
/* 																								         */
/* Outputs: void                                                                                         */

void asyncronousADC_startConversion(u8 channel , void * ptrToFun(u8, u16))
{Feature=Feature_asyncronousConversion;
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <asyncronousADC_startConversion+0x6>
     d12:	0f 92       	push	r0
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	89 83       	std	Y+1, r24	; 0x01
     d1a:	7b 83       	std	Y+3, r23	; 0x03
     d1c:	6a 83       	std	Y+2, r22	; 0x02
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	80 93 70 00 	sts	0x0070, r24
	ptrToCallBackFun = ptrToFun ;
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	9b 81       	ldd	r25, Y+3	; 0x03
     d28:	90 93 82 00 	sts	0x0082, r25
     d2c:	80 93 81 00 	sts	0x0081, r24
	ADC_channel=channel;
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	80 93 7b 00 	sts	0x007B, r24
/********************************* Set channel to be converted********************************************/
 ADMUX |= channel;
     d36:	a7 e2       	ldi	r26, 0x27	; 39
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e7 e2       	ldi	r30, 0x27	; 39
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	90 81       	ld	r25, Z
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	89 2b       	or	r24, r25
     d44:	8c 93       	st	X, r24
/******************************* enable of ADC interrupt (PIE)********************************************/
 bitset(ADCSRA,ADIE);
     d46:	a6 e2       	ldi	r26, 0x26	; 38
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e6 e2       	ldi	r30, 0x26	; 38
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	88 60       	ori	r24, 0x08	; 8
     d52:	8c 93       	st	X, r24
/************************************** Start Conversion *************************************************/
 bitset(ADCSRA,ADSC);  // this bit is set to zero after conversion finished
     d54:	a6 e2       	ldi	r26, 0x26	; 38
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e6 e2       	ldi	r30, 0x26	; 38
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	80 64       	ori	r24, 0x40	; 64
     d60:	8c 93       	st	X, r24
}
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <ADC_getDigitalValue>:
/*                                                                                                       */
/* Outputs: u16 																	                     */
/*          this function  returns u16 var that represents the current ADC digital output value          */
static u16 ADC_getDigitalValue(void);
static u16 ADC_getDigitalValue(void)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <ADC_getDigitalValue+0x6>
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62

	switch (ADC_RESOLUTION)
	{

	case ADC_RESOLUTION_8_BIT :
		digitalvalue=ADCH;
     d78:	e5 e2       	ldi	r30, 0x25	; 37
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	88 2f       	mov	r24, r24
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
		digitalvalue=ADCH;

		break;

	}
    return digitalvalue;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <__vector_16>:
/*********************************************************************************************************/


ISR(ADC_vect)
{
     d94:	1f 92       	push	r1
     d96:	0f 92       	push	r0
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	0f 92       	push	r0
     d9c:	11 24       	eor	r1, r1
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	2f 93       	push	r18
     da4:	3f 93       	push	r19
     da6:	4f 93       	push	r20
     da8:	5f 93       	push	r21
     daa:	6f 93       	push	r22
     dac:	7f 93       	push	r23
     dae:	8f 93       	push	r24
     db0:	9f 93       	push	r25
     db2:	af 93       	push	r26
     db4:	bf 93       	push	r27
     db6:	ef 93       	push	r30
     db8:	ff 93       	push	r31
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <__vector_16+0x2c>
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <__vector_16+0x2e>
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
	switch(Feature)
     dc6:	80 91 70 00 	lds	r24, 0x0070
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	3c 83       	std	Y+4, r19	; 0x04
     dd0:	2b 83       	std	Y+3, r18	; 0x03
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	9c 81       	ldd	r25, Y+4	; 0x04
     dd6:	82 30       	cpi	r24, 0x02	; 2
     dd8:	91 05       	cpc	r25, r1
     dda:	31 f1       	breq	.+76     	; 0xe28 <__vector_16+0x94>
     ddc:	2b 81       	ldd	r18, Y+3	; 0x03
     dde:	3c 81       	ldd	r19, Y+4	; 0x04
     de0:	23 30       	cpi	r18, 0x03	; 3
     de2:	31 05       	cpc	r19, r1
     de4:	09 f4       	brne	.+2      	; 0xde8 <__vector_16+0x54>
     de6:	c8 c0       	rjmp	.+400    	; 0xf78 <__vector_16+0x1e4>
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	9c 81       	ldd	r25, Y+4	; 0x04
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	91 05       	cpc	r25, r1
     df0:	09 f0       	breq	.+2      	; 0xdf4 <__vector_16+0x60>
     df2:	24 c1       	rjmp	.+584    	; 0x103c <__vector_16+0x2a8>
	{


	case Feature_asyncronousConversion :

						digitalVal= ADC_getDigitalValue();
     df4:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ADC_getDigitalValue>
     df8:	90 93 7a 00 	sts	0x007A, r25
     dfc:	80 93 79 00 	sts	0x0079, r24
						if (ptrToCallBackFun != NULL)
     e00:	80 91 81 00 	lds	r24, 0x0081
     e04:	90 91 82 00 	lds	r25, 0x0082
     e08:	00 97       	sbiw	r24, 0x00	; 0
     e0a:	09 f4       	brne	.+2      	; 0xe0e <__vector_16+0x7a>
     e0c:	17 c1       	rjmp	.+558    	; 0x103c <__vector_16+0x2a8>
						{
						ptrToCallBackFun(ADC_channel , digitalVal);
     e0e:	e0 91 81 00 	lds	r30, 0x0081
     e12:	f0 91 82 00 	lds	r31, 0x0082
     e16:	80 91 7b 00 	lds	r24, 0x007B
     e1a:	20 91 79 00 	lds	r18, 0x0079
     e1e:	30 91 7a 00 	lds	r19, 0x007A
     e22:	b9 01       	movw	r22, r18
     e24:	09 95       	icall
     e26:	0a c1       	rjmp	.+532    	; 0x103c <__vector_16+0x2a8>

		/*************************** Return "digital value" ************************************************/

	 case Feature_freeRunConversion   :

						switch(ADC_channel)
     e28:	80 91 7b 00 	lds	r24, 0x007B
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	3a 83       	std	Y+2, r19	; 0x02
     e32:	29 83       	std	Y+1, r18	; 0x01
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	91 05       	cpc	r25, r1
     e3c:	b1 f1       	breq	.+108    	; 0xeaa <__vector_16+0x116>
     e3e:	29 81       	ldd	r18, Y+1	; 0x01
     e40:	3a 81       	ldd	r19, Y+2	; 0x02
     e42:	22 30       	cpi	r18, 0x02	; 2
     e44:	31 05       	cpc	r19, r1
     e46:	2c f4       	brge	.+10     	; 0xe52 <__vector_16+0xbe>
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	9a 81       	ldd	r25, Y+2	; 0x02
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	71 f0       	breq	.+28     	; 0xe6c <__vector_16+0xd8>
     e50:	f5 c0       	rjmp	.+490    	; 0x103c <__vector_16+0x2a8>
     e52:	29 81       	ldd	r18, Y+1	; 0x01
     e54:	3a 81       	ldd	r19, Y+2	; 0x02
     e56:	22 30       	cpi	r18, 0x02	; 2
     e58:	31 05       	cpc	r19, r1
     e5a:	09 f4       	brne	.+2      	; 0xe5e <__vector_16+0xca>
     e5c:	45 c0       	rjmp	.+138    	; 0xee8 <__vector_16+0x154>
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	83 30       	cpi	r24, 0x03	; 3
     e64:	91 05       	cpc	r25, r1
     e66:	09 f4       	brne	.+2      	; 0xe6a <__vector_16+0xd6>
     e68:	5e c0       	rjmp	.+188    	; 0xf26 <__vector_16+0x192>
     e6a:	e8 c0       	rjmp	.+464    	; 0x103c <__vector_16+0x2a8>
						{
						case CONVERSION_CHANNEL_0 :
							ADCvals.value0=ADC_getDigitalValue();
     e6c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ADC_getDigitalValue>
     e70:	90 93 72 00 	sts	0x0072, r25
     e74:	80 93 71 00 	sts	0x0071, r24
							ADC_channel=CONVERSION_CHANNEL_1;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	80 93 7b 00 	sts	0x007B, r24
							ADMUX |= CONVERSION_CHANNEL_1;
     e7e:	a7 e2       	ldi	r26, 0x27	; 39
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e7 e2       	ldi	r30, 0x27	; 39
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	81 60       	ori	r24, 0x01	; 1
     e8a:	8c 93       	st	X, r24
							bitset(ADCSRA,ADIE);
     e8c:	a6 e2       	ldi	r26, 0x26	; 38
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e6 e2       	ldi	r30, 0x26	; 38
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	88 60       	ori	r24, 0x08	; 8
     e98:	8c 93       	st	X, r24
							bitset(ADCSRA,ADSC);
     e9a:	a6 e2       	ldi	r26, 0x26	; 38
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e6 e2       	ldi	r30, 0x26	; 38
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	80 64       	ori	r24, 0x40	; 64
     ea6:	8c 93       	st	X, r24
     ea8:	c9 c0       	rjmp	.+402    	; 0x103c <__vector_16+0x2a8>
							break;

						case CONVERSION_CHANNEL_1 :
							ADCvals.value1=ADC_getDigitalValue();
     eaa:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ADC_getDigitalValue>
     eae:	90 93 74 00 	sts	0x0074, r25
     eb2:	80 93 73 00 	sts	0x0073, r24
							ADC_channel=CONVERSION_CHANNEL_2;
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	80 93 7b 00 	sts	0x007B, r24
							ADMUX |= CONVERSION_CHANNEL_2;
     ebc:	a7 e2       	ldi	r26, 0x27	; 39
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e7 e2       	ldi	r30, 0x27	; 39
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	82 60       	ori	r24, 0x02	; 2
     ec8:	8c 93       	st	X, r24
							bitset(ADCSRA,ADIE);
     eca:	a6 e2       	ldi	r26, 0x26	; 38
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e6 e2       	ldi	r30, 0x26	; 38
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	88 60       	ori	r24, 0x08	; 8
     ed6:	8c 93       	st	X, r24
							bitset(ADCSRA,ADSC);
     ed8:	a6 e2       	ldi	r26, 0x26	; 38
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e6 e2       	ldi	r30, 0x26	; 38
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	80 64       	ori	r24, 0x40	; 64
     ee4:	8c 93       	st	X, r24
     ee6:	aa c0       	rjmp	.+340    	; 0x103c <__vector_16+0x2a8>
							break;

						case CONVERSION_CHANNEL_2 :
							ADCvals.value2=ADC_getDigitalValue();
     ee8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ADC_getDigitalValue>
     eec:	90 93 76 00 	sts	0x0076, r25
     ef0:	80 93 75 00 	sts	0x0075, r24
							ADC_channel=CONVERSION_CHANNEL_3;
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	80 93 7b 00 	sts	0x007B, r24
							ADMUX |= CONVERSION_CHANNEL_3;
     efa:	a7 e2       	ldi	r26, 0x27	; 39
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e7 e2       	ldi	r30, 0x27	; 39
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	83 60       	ori	r24, 0x03	; 3
     f06:	8c 93       	st	X, r24
							bitset(ADCSRA,ADIE);
     f08:	a6 e2       	ldi	r26, 0x26	; 38
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e6 e2       	ldi	r30, 0x26	; 38
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	88 60       	ori	r24, 0x08	; 8
     f14:	8c 93       	st	X, r24
							bitset(ADCSRA,ADSC);
     f16:	a6 e2       	ldi	r26, 0x26	; 38
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e6 e2       	ldi	r30, 0x26	; 38
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	80 64       	ori	r24, 0x40	; 64
     f22:	8c 93       	st	X, r24
     f24:	8b c0       	rjmp	.+278    	; 0x103c <__vector_16+0x2a8>
							break;

						case CONVERSION_CHANNEL_3 :
							ADCvals.value3=ADC_getDigitalValue();
     f26:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ADC_getDigitalValue>
     f2a:	90 93 78 00 	sts	0x0078, r25
     f2e:	80 93 77 00 	sts	0x0077, r24
							if (ptrTocallbkfn != NULL)
     f32:	80 91 7d 00 	lds	r24, 0x007D
     f36:	90 91 7e 00 	lds	r25, 0x007E
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	a9 f0       	breq	.+42     	; 0xf68 <__vector_16+0x1d4>
							{
							ptrTocallbkfn(ADCvals);
     f3e:	e0 91 7d 00 	lds	r30, 0x007D
     f42:	f0 91 7e 00 	lds	r31, 0x007E
     f46:	20 91 71 00 	lds	r18, 0x0071
     f4a:	30 91 72 00 	lds	r19, 0x0072
     f4e:	40 91 73 00 	lds	r20, 0x0073
     f52:	50 91 74 00 	lds	r21, 0x0074
     f56:	60 91 75 00 	lds	r22, 0x0075
     f5a:	70 91 76 00 	lds	r23, 0x0076
     f5e:	80 91 77 00 	lds	r24, 0x0077
     f62:	90 91 78 00 	lds	r25, 0x0078
     f66:	09 95       	icall
							}
							bitclear(ADCSRA,ADIE);
     f68:	a6 e2       	ldi	r26, 0x26	; 38
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e6 e2       	ldi	r30, 0x26	; 38
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	87 7f       	andi	r24, 0xF7	; 247
     f74:	8c 93       	st	X, r24
     f76:	62 c0       	rjmp	.+196    	; 0x103c <__vector_16+0x2a8>
						}
						break;

	   case Feature_customizeFreeRunConversion :

					   Digitalvals[Current_CH]=ADC_getDigitalValue();
     f78:	80 91 7c 00 	lds	r24, 0x007C
     f7c:	08 2f       	mov	r16, r24
     f7e:	10 e0       	ldi	r17, 0x00	; 0
     f80:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ADC_getDigitalValue>
     f84:	9c 01       	movw	r18, r24
     f86:	c8 01       	movw	r24, r16
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	fc 01       	movw	r30, r24
     f8e:	e8 59       	subi	r30, 0x98	; 152
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	31 83       	std	Z+1, r19	; 0x01
     f94:	20 83       	st	Z, r18

					   if(Current_CH < LAST_CHANNEL  && Digitalvals[Current_CH+1]!=0)
     f96:	80 91 7c 00 	lds	r24, 0x007C
     f9a:	83 30       	cpi	r24, 0x03	; 3
     f9c:	a0 f5       	brcc	.+104    	; 0x1006 <__vector_16+0x272>
     f9e:	80 91 7c 00 	lds	r24, 0x007C
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	fc 01       	movw	r30, r24
     fae:	e8 59       	subi	r30, 0x98	; 152
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	31 f1       	breq	.+76     	; 0x1006 <__vector_16+0x272>
					   {

						   Current_CH ++ ;
     fba:	80 91 7c 00 	lds	r24, 0x007C
     fbe:	8f 5f       	subi	r24, 0xFF	; 255
     fc0:	80 93 7c 00 	sts	0x007C, r24

						   ADMUX |= Digitalvals[Current_CH];
     fc4:	a7 e2       	ldi	r26, 0x27	; 39
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e7 e2       	ldi	r30, 0x27	; 39
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	20 81       	ld	r18, Z
     fce:	80 91 7c 00 	lds	r24, 0x007C
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	fc 01       	movw	r30, r24
     fdc:	e8 59       	subi	r30, 0x98	; 152
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	80 81       	ld	r24, Z
     fe2:	91 81       	ldd	r25, Z+1	; 0x01
     fe4:	82 2b       	or	r24, r18
     fe6:	8c 93       	st	X, r24

						   bitset(ADCSRA,ADIE);
     fe8:	a6 e2       	ldi	r26, 0x26	; 38
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e6 e2       	ldi	r30, 0x26	; 38
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	88 60       	ori	r24, 0x08	; 8
     ff4:	8c 93       	st	X, r24
						   bitset(ADCSRA,ADSC);
     ff6:	a6 e2       	ldi	r26, 0x26	; 38
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e6 e2       	ldi	r30, 0x26	; 38
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	80 64       	ori	r24, 0x40	; 64
    1002:	8c 93       	st	X, r24
    1004:	1b c0       	rjmp	.+54     	; 0x103c <__vector_16+0x2a8>

					   }
					   else
					   {
						   if(ptrTofunction != NULL)
    1006:	80 91 7f 00 	lds	r24, 0x007F
    100a:	90 91 80 00 	lds	r25, 0x0080
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	39 f0       	breq	.+14     	; 0x1020 <__vector_16+0x28c>
						   {
							   ptrTofunction(Digitalvals);
    1012:	e0 91 7f 00 	lds	r30, 0x007F
    1016:	f0 91 80 00 	lds	r31, 0x0080
    101a:	88 e6       	ldi	r24, 0x68	; 104
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	09 95       	icall
						   }
						   bitclear(ADCSRA,ADIE);
    1020:	a6 e2       	ldi	r26, 0x26	; 38
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e6 e2       	ldi	r30, 0x26	; 38
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	87 7f       	andi	r24, 0xF7	; 247
    102c:	8c 93       	st	X, r24
						   bitclear(ADCSRA,ADSC);
    102e:	a6 e2       	ldi	r26, 0x26	; 38
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e6 e2       	ldi	r30, 0x26	; 38
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	8f 7b       	andi	r24, 0xBF	; 191
    103a:	8c 93       	st	X, r24
					   }


						break;
			}
}
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	ff 91       	pop	r31
    104a:	ef 91       	pop	r30
    104c:	bf 91       	pop	r27
    104e:	af 91       	pop	r26
    1050:	9f 91       	pop	r25
    1052:	8f 91       	pop	r24
    1054:	7f 91       	pop	r23
    1056:	6f 91       	pop	r22
    1058:	5f 91       	pop	r21
    105a:	4f 91       	pop	r20
    105c:	3f 91       	pop	r19
    105e:	2f 91       	pop	r18
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <ADC_setRefVoltage>:
/*																				            	         */
/* Inputs : void														 			                     */
/* 																								         */
/* Outputs: void																	                     */
static void ADC_setRefVoltage(void)
{
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
	switch(ADC_REF_VOLTAGE)
		{

		case ADC_REF_VOLTAGE_5V :
			bitclear(ADMUX,REFS1);
    1076:	a7 e2       	ldi	r26, 0x27	; 39
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e7 e2       	ldi	r30, 0x27	; 39
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	8f 77       	andi	r24, 0x7F	; 127
    1082:	8c 93       	st	X, r24
			bitset(ADMUX,REFS0);
    1084:	a7 e2       	ldi	r26, 0x27	; 39
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e7 e2       	ldi	r30, 0x27	; 39
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	80 64       	ori	r24, 0x40	; 64
    1090:	8c 93       	st	X, r24
			bitset(ADMUX,REFS0);

		}


}
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <ADC_setFrequency>:
/*																				            	         */
/* Inputs : void														 			                     */
/* 																								         */
/* Outputs: void																	                     */
static void ADC_setFrequency(void)
{
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
		bitset(ADCSRA,ADPS1);
		bitclear(ADCSRA,ADPS2);
		break;

	case  ADC_CLOCK_FREQUENCY_1000KHZ :
		bitset(ADCSRA,ADPS0);
    10a0:	a6 e2       	ldi	r26, 0x26	; 38
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e6 e2       	ldi	r30, 0x26	; 38
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	81 60       	ori	r24, 0x01	; 1
    10ac:	8c 93       	st	X, r24
		bitset(ADCSRA,ADPS1);
    10ae:	a6 e2       	ldi	r26, 0x26	; 38
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e6 e2       	ldi	r30, 0x26	; 38
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	82 60       	ori	r24, 0x02	; 2
    10ba:	8c 93       	st	X, r24
		bitclear(ADCSRA,ADPS2);
    10bc:	a6 e2       	ldi	r26, 0x26	; 38
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e6 e2       	ldi	r30, 0x26	; 38
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	8b 7f       	andi	r24, 0xFB	; 251
    10c8:	8c 93       	st	X, r24
		bitset(ADCSRA,ADPS1);
		bitset(ADCSRA,ADPS2);
		break;

	}
}
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <ADC_setResolution>:
/*																				            	         */
/* Inputs : void														 			                     */
/* 																								         */
/* Outputs: void																	                     */
static void ADC_setResolution(void)
{
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
	switch(ADC_RESOLUTION)
		{

		case ADC_RESOLUTION_8_BIT :
			bitset(ADMUX,ADLAR);
    10d8:	a7 e2       	ldi	r26, 0x27	; 39
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e7 e2       	ldi	r30, 0x27	; 39
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	80 62       	ori	r24, 0x20	; 32
    10e4:	8c 93       	st	X, r24
			bitset(ADMUX,ADLAR);
			break;

		}

}
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <DIO_Set_PORT_Direction>:
#include "macros.h"
#include "DIO.h"
#include "register.h"

u8 DIO_Set_PORT_Direction(u8 portNum , u8 Direction)
{
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	00 d0       	rcall	.+0      	; 0x10f2 <DIO_Set_PORT_Direction+0x6>
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <DIO_Set_PORT_Direction+0x8>
    10f4:	0f 92       	push	r0
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	8a 83       	std	Y+2, r24	; 0x02
    10fc:	6b 83       	std	Y+3, r22	; 0x03
	s8 State;

	State = OK;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	89 83       	std	Y+1, r24	; 0x01
		switch(portNum)
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	3d 83       	std	Y+5, r19	; 0x05
    110a:	2c 83       	std	Y+4, r18	; 0x04
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	9d 81       	ldd	r25, Y+5	; 0x05
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	91 05       	cpc	r25, r1
    1114:	d1 f0       	breq	.+52     	; 0x114a <DIO_Set_PORT_Direction+0x5e>
    1116:	2c 81       	ldd	r18, Y+4	; 0x04
    1118:	3d 81       	ldd	r19, Y+5	; 0x05
    111a:	22 30       	cpi	r18, 0x02	; 2
    111c:	31 05       	cpc	r19, r1
    111e:	2c f4       	brge	.+10     	; 0x112a <DIO_Set_PORT_Direction+0x3e>
    1120:	8c 81       	ldd	r24, Y+4	; 0x04
    1122:	9d 81       	ldd	r25, Y+5	; 0x05
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	61 f0       	breq	.+24     	; 0x1140 <DIO_Set_PORT_Direction+0x54>
    1128:	1f c0       	rjmp	.+62     	; 0x1168 <DIO_Set_PORT_Direction+0x7c>
    112a:	2c 81       	ldd	r18, Y+4	; 0x04
    112c:	3d 81       	ldd	r19, Y+5	; 0x05
    112e:	22 30       	cpi	r18, 0x02	; 2
    1130:	31 05       	cpc	r19, r1
    1132:	81 f0       	breq	.+32     	; 0x1154 <DIO_Set_PORT_Direction+0x68>
    1134:	8c 81       	ldd	r24, Y+4	; 0x04
    1136:	9d 81       	ldd	r25, Y+5	; 0x05
    1138:	83 30       	cpi	r24, 0x03	; 3
    113a:	91 05       	cpc	r25, r1
    113c:	81 f0       	breq	.+32     	; 0x115e <DIO_Set_PORT_Direction+0x72>
    113e:	14 c0       	rjmp	.+40     	; 0x1168 <DIO_Set_PORT_Direction+0x7c>
		{
		case PortA_Num :

			DDRA = Direction;
    1140:	ea e3       	ldi	r30, 0x3A	; 58
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	80 83       	st	Z, r24
    1148:	10 c0       	rjmp	.+32     	; 0x116a <DIO_Set_PORT_Direction+0x7e>
			break;
		case PortB_Num:

			DDRB = Direction;
    114a:	e7 e3       	ldi	r30, 0x37	; 55
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	80 83       	st	Z, r24
    1152:	0b c0       	rjmp	.+22     	; 0x116a <DIO_Set_PORT_Direction+0x7e>
			break;

		case PortC_Num:
			DDRC = Direction;
    1154:	e4 e3       	ldi	r30, 0x34	; 52
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	80 83       	st	Z, r24
    115c:	06 c0       	rjmp	.+12     	; 0x116a <DIO_Set_PORT_Direction+0x7e>
			break;

		case PortD_Num:
			DDRD = Direction;
    115e:	e1 e3       	ldi	r30, 0x31	; 49
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	80 83       	st	Z, r24
    1166:	01 c0       	rjmp	.+2      	; 0x116a <DIO_Set_PORT_Direction+0x7e>
			break;
		default:
			State = Not_OK;
    1168:	19 82       	std	Y+1, r1	; 0x01
		}

		return(State);
    116a:	89 81       	ldd	r24, Y+1	; 0x01
}
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <DIO_Set_PIN_Direction>:
u8 DIO_Set_PIN_Direction(u8 portNum ,u8 pinNum ,u8 Direction)
{
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	2e 97       	sbiw	r28, 0x0e	; 14
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	8a 83       	std	Y+2, r24	; 0x02
    1192:	6b 83       	std	Y+3, r22	; 0x03
    1194:	4c 83       	std	Y+4, r20	; 0x04
	s8 State;

		State = OK;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	89 83       	std	Y+1, r24	; 0x01
	switch(portNum)
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	3e 87       	std	Y+14, r19	; 0x0e
    11a2:	2d 87       	std	Y+13, r18	; 0x0d
    11a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	91 05       	cpc	r25, r1
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <DIO_Set_PIN_Direction+0x34>
    11ae:	51 c0       	rjmp	.+162    	; 0x1252 <DIO_Set_PIN_Direction+0xd6>
    11b0:	2d 85       	ldd	r18, Y+13	; 0x0d
    11b2:	3e 85       	ldd	r19, Y+14	; 0x0e
    11b4:	22 30       	cpi	r18, 0x02	; 2
    11b6:	31 05       	cpc	r19, r1
    11b8:	2c f4       	brge	.+10     	; 0x11c4 <DIO_Set_PIN_Direction+0x48>
    11ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    11bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	71 f0       	breq	.+28     	; 0x11de <DIO_Set_PIN_Direction+0x62>
    11c2:	f5 c0       	rjmp	.+490    	; 0x13ae <DIO_Set_PIN_Direction+0x232>
    11c4:	2d 85       	ldd	r18, Y+13	; 0x0d
    11c6:	3e 85       	ldd	r19, Y+14	; 0x0e
    11c8:	22 30       	cpi	r18, 0x02	; 2
    11ca:	31 05       	cpc	r19, r1
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <DIO_Set_PIN_Direction+0x54>
    11ce:	7b c0       	rjmp	.+246    	; 0x12c6 <DIO_Set_PIN_Direction+0x14a>
    11d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d4:	83 30       	cpi	r24, 0x03	; 3
    11d6:	91 05       	cpc	r25, r1
    11d8:	09 f4       	brne	.+2      	; 0x11dc <DIO_Set_PIN_Direction+0x60>
    11da:	af c0       	rjmp	.+350    	; 0x133a <DIO_Set_PIN_Direction+0x1be>
    11dc:	e8 c0       	rjmp	.+464    	; 0x13ae <DIO_Set_PIN_Direction+0x232>
		{
		case PortA_Num :
			switch(Direction)
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	3c 87       	std	Y+12, r19	; 0x0c
    11e6:	2b 87       	std	Y+11, r18	; 0x0b
    11e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	31 f0       	breq	.+12     	; 0x11fc <DIO_Set_PIN_Direction+0x80>
    11f0:	2b 85       	ldd	r18, Y+11	; 0x0b
    11f2:	3c 85       	ldd	r19, Y+12	; 0x0c
    11f4:	21 30       	cpi	r18, 0x01	; 1
    11f6:	31 05       	cpc	r19, r1
    11f8:	b1 f0       	breq	.+44     	; 0x1226 <DIO_Set_PIN_Direction+0xaa>
    11fa:	29 c0       	rjmp	.+82     	; 0x124e <DIO_Set_PIN_Direction+0xd2>
			{
				case INPUT:
					bitclear(DDRA,pinNum);
    11fc:	aa e3       	ldi	r26, 0x3A	; 58
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	ea e3       	ldi	r30, 0x3A	; 58
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 2e       	mov	r0, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_Set_PIN_Direction+0x9e>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <DIO_Set_PIN_Direction+0x9a>
    121e:	80 95       	com	r24
    1220:	84 23       	and	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	c5 c0       	rjmp	.+394    	; 0x13b0 <DIO_Set_PIN_Direction+0x234>

					break;
				case OUTPUT:
					bitset(DDRA,pinNum);
    1226:	aa e3       	ldi	r26, 0x3A	; 58
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	ea e3       	ldi	r30, 0x3A	; 58
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_Set_PIN_Direction+0xc8>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_Set_PIN_Direction+0xc4>
    1248:	84 2b       	or	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	b1 c0       	rjmp	.+354    	; 0x13b0 <DIO_Set_PIN_Direction+0x234>
					break;
				default:
					State = Not_OK;
    124e:	19 82       	std	Y+1, r1	; 0x01
    1250:	af c0       	rjmp	.+350    	; 0x13b0 <DIO_Set_PIN_Direction+0x234>
					break;
				}
				break;
		case PortB_Num:
				switch(Direction)
    1252:	8c 81       	ldd	r24, Y+4	; 0x04
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	3a 87       	std	Y+10, r19	; 0x0a
    125a:	29 87       	std	Y+9, r18	; 0x09
    125c:	89 85       	ldd	r24, Y+9	; 0x09
    125e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	31 f0       	breq	.+12     	; 0x1270 <DIO_Set_PIN_Direction+0xf4>
    1264:	29 85       	ldd	r18, Y+9	; 0x09
    1266:	3a 85       	ldd	r19, Y+10	; 0x0a
    1268:	21 30       	cpi	r18, 0x01	; 1
    126a:	31 05       	cpc	r19, r1
    126c:	b1 f0       	breq	.+44     	; 0x129a <DIO_Set_PIN_Direction+0x11e>
    126e:	29 c0       	rjmp	.+82     	; 0x12c2 <DIO_Set_PIN_Direction+0x146>
				{
				case INPUT:
					bitclear(DDRB,pinNum);
    1270:	a7 e3       	ldi	r26, 0x37	; 55
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e7 e3       	ldi	r30, 0x37	; 55
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <DIO_Set_PIN_Direction+0x112>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <DIO_Set_PIN_Direction+0x10e>
    1292:	80 95       	com	r24
    1294:	84 23       	and	r24, r20
    1296:	8c 93       	st	X, r24
    1298:	8b c0       	rjmp	.+278    	; 0x13b0 <DIO_Set_PIN_Direction+0x234>
					break;
				case OUTPUT:
					bitset(DDRB,pinNum);
    129a:	a7 e3       	ldi	r26, 0x37	; 55
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e7 e3       	ldi	r30, 0x37	; 55
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_Set_PIN_Direction+0x13c>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_Set_PIN_Direction+0x138>
    12bc:	84 2b       	or	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	77 c0       	rjmp	.+238    	; 0x13b0 <DIO_Set_PIN_Direction+0x234>
					break;
				default:
					State = Not_OK;
    12c2:	19 82       	std	Y+1, r1	; 0x01
    12c4:	75 c0       	rjmp	.+234    	; 0x13b0 <DIO_Set_PIN_Direction+0x234>
					break;
				}
				break;
		case PortC_Num:
			switch(Direction)
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	38 87       	std	Y+8, r19	; 0x08
    12ce:	2f 83       	std	Y+7, r18	; 0x07
    12d0:	8f 81       	ldd	r24, Y+7	; 0x07
    12d2:	98 85       	ldd	r25, Y+8	; 0x08
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	31 f0       	breq	.+12     	; 0x12e4 <DIO_Set_PIN_Direction+0x168>
    12d8:	2f 81       	ldd	r18, Y+7	; 0x07
    12da:	38 85       	ldd	r19, Y+8	; 0x08
    12dc:	21 30       	cpi	r18, 0x01	; 1
    12de:	31 05       	cpc	r19, r1
    12e0:	b1 f0       	breq	.+44     	; 0x130e <DIO_Set_PIN_Direction+0x192>
    12e2:	29 c0       	rjmp	.+82     	; 0x1336 <DIO_Set_PIN_Direction+0x1ba>
			{
			case INPUT:
				bitclear(DDRC,pinNum);
    12e4:	a4 e3       	ldi	r26, 0x34	; 52
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e4 e3       	ldi	r30, 0x34	; 52
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 2e       	mov	r0, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_Set_PIN_Direction+0x186>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	0a 94       	dec	r0
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_Set_PIN_Direction+0x182>
    1306:	80 95       	com	r24
    1308:	84 23       	and	r24, r20
    130a:	8c 93       	st	X, r24
    130c:	51 c0       	rjmp	.+162    	; 0x13b0 <DIO_Set_PIN_Direction+0x234>
				break;
			case OUTPUT:
				bitset(DDRC,pinNum);
    130e:	a4 e3       	ldi	r26, 0x34	; 52
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e4 e3       	ldi	r30, 0x34	; 52
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_Set_PIN_Direction+0x1b0>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_Set_PIN_Direction+0x1ac>
    1330:	84 2b       	or	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	3d c0       	rjmp	.+122    	; 0x13b0 <DIO_Set_PIN_Direction+0x234>
				break;
			default:
				State = Not_OK;
    1336:	19 82       	std	Y+1, r1	; 0x01
    1338:	3b c0       	rjmp	.+118    	; 0x13b0 <DIO_Set_PIN_Direction+0x234>
				break;
			}
			break;
		case PortD_Num:
			switch(Direction)
    133a:	8c 81       	ldd	r24, Y+4	; 0x04
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	3e 83       	std	Y+6, r19	; 0x06
    1342:	2d 83       	std	Y+5, r18	; 0x05
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	9e 81       	ldd	r25, Y+6	; 0x06
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	31 f0       	breq	.+12     	; 0x1358 <DIO_Set_PIN_Direction+0x1dc>
    134c:	2d 81       	ldd	r18, Y+5	; 0x05
    134e:	3e 81       	ldd	r19, Y+6	; 0x06
    1350:	21 30       	cpi	r18, 0x01	; 1
    1352:	31 05       	cpc	r19, r1
    1354:	b1 f0       	breq	.+44     	; 0x1382 <DIO_Set_PIN_Direction+0x206>
    1356:	29 c0       	rjmp	.+82     	; 0x13aa <DIO_Set_PIN_Direction+0x22e>
			{
			case INPUT:
				bitclear(DDRD,pinNum);
    1358:	a1 e3       	ldi	r26, 0x31	; 49
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e1 e3       	ldi	r30, 0x31	; 49
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_Set_PIN_Direction+0x1fa>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_Set_PIN_Direction+0x1f6>
    137a:	80 95       	com	r24
    137c:	84 23       	and	r24, r20
    137e:	8c 93       	st	X, r24
    1380:	17 c0       	rjmp	.+46     	; 0x13b0 <DIO_Set_PIN_Direction+0x234>
				break;
			case OUTPUT:
				bitset(DDRD,pinNum);
    1382:	a1 e3       	ldi	r26, 0x31	; 49
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e1 e3       	ldi	r30, 0x31	; 49
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	48 2f       	mov	r20, r24
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 2e       	mov	r0, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_Set_PIN_Direction+0x224>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	0a 94       	dec	r0
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_Set_PIN_Direction+0x220>
    13a4:	84 2b       	or	r24, r20
    13a6:	8c 93       	st	X, r24
    13a8:	03 c0       	rjmp	.+6      	; 0x13b0 <DIO_Set_PIN_Direction+0x234>
				break;
			default:
				State = Not_OK;
    13aa:	19 82       	std	Y+1, r1	; 0x01
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <DIO_Set_PIN_Direction+0x234>
				break;
			}
			break;
			default:
				State = Not_OK;
    13ae:	19 82       	std	Y+1, r1	; 0x01

}

		return(State);
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
	}
    13b2:	2e 96       	adiw	r28, 0x0e	; 14
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <DIO_Set_PORT_Value>:

u8 DIO_Set_PORT_Value(u8 portNum , u8 Value)
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <DIO_Set_PORT_Value+0x6>
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <DIO_Set_PORT_Value+0x8>
    13cc:	0f 92       	push	r0
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	8a 83       	std	Y+2, r24	; 0x02
    13d4:	6b 83       	std	Y+3, r22	; 0x03
	s8 State;

	State = OK;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	89 83       	std	Y+1, r24	; 0x01
			switch(portNum)
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	3d 83       	std	Y+5, r19	; 0x05
    13e2:	2c 83       	std	Y+4, r18	; 0x04
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	9d 81       	ldd	r25, Y+5	; 0x05
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	91 05       	cpc	r25, r1
    13ec:	d1 f0       	breq	.+52     	; 0x1422 <DIO_Set_PORT_Value+0x5e>
    13ee:	2c 81       	ldd	r18, Y+4	; 0x04
    13f0:	3d 81       	ldd	r19, Y+5	; 0x05
    13f2:	22 30       	cpi	r18, 0x02	; 2
    13f4:	31 05       	cpc	r19, r1
    13f6:	2c f4       	brge	.+10     	; 0x1402 <DIO_Set_PORT_Value+0x3e>
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	9d 81       	ldd	r25, Y+5	; 0x05
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	61 f0       	breq	.+24     	; 0x1418 <DIO_Set_PORT_Value+0x54>
    1400:	1f c0       	rjmp	.+62     	; 0x1440 <DIO_Set_PORT_Value+0x7c>
    1402:	2c 81       	ldd	r18, Y+4	; 0x04
    1404:	3d 81       	ldd	r19, Y+5	; 0x05
    1406:	22 30       	cpi	r18, 0x02	; 2
    1408:	31 05       	cpc	r19, r1
    140a:	81 f0       	breq	.+32     	; 0x142c <DIO_Set_PORT_Value+0x68>
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	83 30       	cpi	r24, 0x03	; 3
    1412:	91 05       	cpc	r25, r1
    1414:	81 f0       	breq	.+32     	; 0x1436 <DIO_Set_PORT_Value+0x72>
    1416:	14 c0       	rjmp	.+40     	; 0x1440 <DIO_Set_PORT_Value+0x7c>
			{
			case PortA_Num :

			PORTA = Value;
    1418:	eb e3       	ldi	r30, 0x3B	; 59
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	80 83       	st	Z, r24
    1420:	10 c0       	rjmp	.+32     	; 0x1442 <DIO_Set_PORT_Value+0x7e>
			break;
			case PortB_Num:

			PORTB = Value;
    1422:	e8 e3       	ldi	r30, 0x38	; 56
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	80 83       	st	Z, r24
    142a:	0b c0       	rjmp	.+22     	; 0x1442 <DIO_Set_PORT_Value+0x7e>
					break;

			case PortC_Num:
			PORTC = Value;
    142c:	e5 e3       	ldi	r30, 0x35	; 53
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	80 83       	st	Z, r24
    1434:	06 c0       	rjmp	.+12     	; 0x1442 <DIO_Set_PORT_Value+0x7e>
			break;

			case PortD_Num:
			PORTD = Value;
    1436:	e2 e3       	ldi	r30, 0x32	; 50
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	80 83       	st	Z, r24
    143e:	01 c0       	rjmp	.+2      	; 0x1442 <DIO_Set_PORT_Value+0x7e>
			break;
			default:
			State = Not_OK;
    1440:	19 82       	std	Y+1, r1	; 0x01
			}

			return(State);
    1442:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <DIO_Set_PIN_Value>:

u8 DIO_Set_PIN_Value(u8 portNum ,u8 pinNum ,u8 Value)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	2e 97       	sbiw	r28, 0x0e	; 14
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	cd bf       	out	0x3d, r28	; 61
    1468:	8a 83       	std	Y+2, r24	; 0x02
    146a:	6b 83       	std	Y+3, r22	; 0x03
    146c:	4c 83       	std	Y+4, r20	; 0x04
	s8 State;

		State = OK;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	89 83       	std	Y+1, r24	; 0x01
		switch(portNum)
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	3e 87       	std	Y+14, r19	; 0x0e
    147a:	2d 87       	std	Y+13, r18	; 0x0d
    147c:	8d 85       	ldd	r24, Y+13	; 0x0d
    147e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	91 05       	cpc	r25, r1
    1484:	09 f4       	brne	.+2      	; 0x1488 <DIO_Set_PIN_Value+0x34>
    1486:	51 c0       	rjmp	.+162    	; 0x152a <DIO_Set_PIN_Value+0xd6>
    1488:	2d 85       	ldd	r18, Y+13	; 0x0d
    148a:	3e 85       	ldd	r19, Y+14	; 0x0e
    148c:	22 30       	cpi	r18, 0x02	; 2
    148e:	31 05       	cpc	r19, r1
    1490:	2c f4       	brge	.+10     	; 0x149c <DIO_Set_PIN_Value+0x48>
    1492:	8d 85       	ldd	r24, Y+13	; 0x0d
    1494:	9e 85       	ldd	r25, Y+14	; 0x0e
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	71 f0       	breq	.+28     	; 0x14b6 <DIO_Set_PIN_Value+0x62>
    149a:	f5 c0       	rjmp	.+490    	; 0x1686 <DIO_Set_PIN_Value+0x232>
    149c:	2d 85       	ldd	r18, Y+13	; 0x0d
    149e:	3e 85       	ldd	r19, Y+14	; 0x0e
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <DIO_Set_PIN_Value+0x54>
    14a6:	7b c0       	rjmp	.+246    	; 0x159e <DIO_Set_PIN_Value+0x14a>
    14a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ac:	83 30       	cpi	r24, 0x03	; 3
    14ae:	91 05       	cpc	r25, r1
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <DIO_Set_PIN_Value+0x60>
    14b2:	af c0       	rjmp	.+350    	; 0x1612 <DIO_Set_PIN_Value+0x1be>
    14b4:	e8 c0       	rjmp	.+464    	; 0x1686 <DIO_Set_PIN_Value+0x232>
		{
		case PortA_Num :
		switch(Value)
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	3c 87       	std	Y+12, r19	; 0x0c
    14be:	2b 87       	std	Y+11, r18	; 0x0b
    14c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	31 f0       	breq	.+12     	; 0x14d4 <DIO_Set_PIN_Value+0x80>
    14c8:	2b 85       	ldd	r18, Y+11	; 0x0b
    14ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    14cc:	21 30       	cpi	r18, 0x01	; 1
    14ce:	31 05       	cpc	r19, r1
    14d0:	b1 f0       	breq	.+44     	; 0x14fe <DIO_Set_PIN_Value+0xaa>
    14d2:	29 c0       	rjmp	.+82     	; 0x1526 <DIO_Set_PIN_Value+0xd2>
		{
		case LOW:
		bitclear(PORTA,pinNum);
    14d4:	ab e3       	ldi	r26, 0x3B	; 59
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	eb e3       	ldi	r30, 0x3B	; 59
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	48 2f       	mov	r20, r24
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 2e       	mov	r0, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <DIO_Set_PIN_Value+0x9e>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <DIO_Set_PIN_Value+0x9a>
    14f6:	80 95       	com	r24
    14f8:	84 23       	and	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	c5 c0       	rjmp	.+394    	; 0x1688 <DIO_Set_PIN_Value+0x234>

		break;
		case HIGH:
		bitset(PORTA,pinNum);
    14fe:	ab e3       	ldi	r26, 0x3B	; 59
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	eb e3       	ldi	r30, 0x3B	; 59
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_Set_PIN_Value+0xc8>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_Set_PIN_Value+0xc4>
    1520:	84 2b       	or	r24, r20
    1522:	8c 93       	st	X, r24
    1524:	b1 c0       	rjmp	.+354    	; 0x1688 <DIO_Set_PIN_Value+0x234>
		break;
		default:
		State = Not_OK;
    1526:	19 82       	std	Y+1, r1	; 0x01
    1528:	af c0       	rjmp	.+350    	; 0x1688 <DIO_Set_PIN_Value+0x234>
		break;
		}
					break;
			case PortB_Num:
					switch(Value)
    152a:	8c 81       	ldd	r24, Y+4	; 0x04
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	3a 87       	std	Y+10, r19	; 0x0a
    1532:	29 87       	std	Y+9, r18	; 0x09
    1534:	89 85       	ldd	r24, Y+9	; 0x09
    1536:	9a 85       	ldd	r25, Y+10	; 0x0a
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	31 f0       	breq	.+12     	; 0x1548 <DIO_Set_PIN_Value+0xf4>
    153c:	29 85       	ldd	r18, Y+9	; 0x09
    153e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1540:	21 30       	cpi	r18, 0x01	; 1
    1542:	31 05       	cpc	r19, r1
    1544:	b1 f0       	breq	.+44     	; 0x1572 <DIO_Set_PIN_Value+0x11e>
    1546:	29 c0       	rjmp	.+82     	; 0x159a <DIO_Set_PIN_Value+0x146>
					{
					case LOW:
						bitclear(PORTB,pinNum);
    1548:	a8 e3       	ldi	r26, 0x38	; 56
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e8 e3       	ldi	r30, 0x38	; 56
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_Set_PIN_Value+0x112>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_Set_PIN_Value+0x10e>
    156a:	80 95       	com	r24
    156c:	84 23       	and	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	8b c0       	rjmp	.+278    	; 0x1688 <DIO_Set_PIN_Value+0x234>
						break;
					case HIGH:
						bitset(PORTB,pinNum);
    1572:	a8 e3       	ldi	r26, 0x38	; 56
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e8 e3       	ldi	r30, 0x38	; 56
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_Set_PIN_Value+0x13c>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_Set_PIN_Value+0x138>
    1594:	84 2b       	or	r24, r20
    1596:	8c 93       	st	X, r24
    1598:	77 c0       	rjmp	.+238    	; 0x1688 <DIO_Set_PIN_Value+0x234>
						break;
					default:
						State = Not_OK;
    159a:	19 82       	std	Y+1, r1	; 0x01
    159c:	75 c0       	rjmp	.+234    	; 0x1688 <DIO_Set_PIN_Value+0x234>
						break;
					}
					break;
			case PortC_Num:
				switch(Value)
    159e:	8c 81       	ldd	r24, Y+4	; 0x04
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	38 87       	std	Y+8, r19	; 0x08
    15a6:	2f 83       	std	Y+7, r18	; 0x07
    15a8:	8f 81       	ldd	r24, Y+7	; 0x07
    15aa:	98 85       	ldd	r25, Y+8	; 0x08
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	31 f0       	breq	.+12     	; 0x15bc <DIO_Set_PIN_Value+0x168>
    15b0:	2f 81       	ldd	r18, Y+7	; 0x07
    15b2:	38 85       	ldd	r19, Y+8	; 0x08
    15b4:	21 30       	cpi	r18, 0x01	; 1
    15b6:	31 05       	cpc	r19, r1
    15b8:	b1 f0       	breq	.+44     	; 0x15e6 <DIO_Set_PIN_Value+0x192>
    15ba:	29 c0       	rjmp	.+82     	; 0x160e <DIO_Set_PIN_Value+0x1ba>
				{
				case LOW:
					bitclear(PORTC,pinNum);
    15bc:	a5 e3       	ldi	r26, 0x35	; 53
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e5 e3       	ldi	r30, 0x35	; 53
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	48 2f       	mov	r20, r24
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	02 2e       	mov	r0, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <DIO_Set_PIN_Value+0x186>
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	0a 94       	dec	r0
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <DIO_Set_PIN_Value+0x182>
    15de:	80 95       	com	r24
    15e0:	84 23       	and	r24, r20
    15e2:	8c 93       	st	X, r24
    15e4:	51 c0       	rjmp	.+162    	; 0x1688 <DIO_Set_PIN_Value+0x234>
					break;
				case HIGH:
					bitset(PORTC,pinNum);
    15e6:	a5 e3       	ldi	r26, 0x35	; 53
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e5 e3       	ldi	r30, 0x35	; 53
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <DIO_Set_PIN_Value+0x1b0>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <DIO_Set_PIN_Value+0x1ac>
    1608:	84 2b       	or	r24, r20
    160a:	8c 93       	st	X, r24
    160c:	3d c0       	rjmp	.+122    	; 0x1688 <DIO_Set_PIN_Value+0x234>
					break;
				default:
					State = Not_OK;
    160e:	19 82       	std	Y+1, r1	; 0x01
    1610:	3b c0       	rjmp	.+118    	; 0x1688 <DIO_Set_PIN_Value+0x234>
					break;
				}
				break;
			case PortD_Num:
				switch(Value)
    1612:	8c 81       	ldd	r24, Y+4	; 0x04
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	3e 83       	std	Y+6, r19	; 0x06
    161a:	2d 83       	std	Y+5, r18	; 0x05
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	31 f0       	breq	.+12     	; 0x1630 <DIO_Set_PIN_Value+0x1dc>
    1624:	2d 81       	ldd	r18, Y+5	; 0x05
    1626:	3e 81       	ldd	r19, Y+6	; 0x06
    1628:	21 30       	cpi	r18, 0x01	; 1
    162a:	31 05       	cpc	r19, r1
    162c:	b1 f0       	breq	.+44     	; 0x165a <DIO_Set_PIN_Value+0x206>
    162e:	29 c0       	rjmp	.+82     	; 0x1682 <DIO_Set_PIN_Value+0x22e>
				{
				case LOW:
					bitclear(PORTD,pinNum);
    1630:	a2 e3       	ldi	r26, 0x32	; 50
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e2 e3       	ldi	r30, 0x32	; 50
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	48 2f       	mov	r20, r24
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	02 2e       	mov	r0, r18
    1648:	02 c0       	rjmp	.+4      	; 0x164e <DIO_Set_PIN_Value+0x1fa>
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	0a 94       	dec	r0
    1650:	e2 f7       	brpl	.-8      	; 0x164a <DIO_Set_PIN_Value+0x1f6>
    1652:	80 95       	com	r24
    1654:	84 23       	and	r24, r20
    1656:	8c 93       	st	X, r24
    1658:	17 c0       	rjmp	.+46     	; 0x1688 <DIO_Set_PIN_Value+0x234>
					break;
				case HIGH:
					bitset(PORTD,pinNum);
    165a:	a2 e3       	ldi	r26, 0x32	; 50
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e2 e3       	ldi	r30, 0x32	; 50
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	48 2f       	mov	r20, r24
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	02 2e       	mov	r0, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_Set_PIN_Value+0x224>
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	0a 94       	dec	r0
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <DIO_Set_PIN_Value+0x220>
    167c:	84 2b       	or	r24, r20
    167e:	8c 93       	st	X, r24
    1680:	03 c0       	rjmp	.+6      	; 0x1688 <DIO_Set_PIN_Value+0x234>
					break;
				default:
					State = Not_OK;
    1682:	19 82       	std	Y+1, r1	; 0x01
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <DIO_Set_PIN_Value+0x234>
					break;
				}
				break;
				default:
					State = Not_OK;
    1686:	19 82       	std	Y+1, r1	; 0x01

	}

			return(State);
    1688:	89 81       	ldd	r24, Y+1	; 0x01
		}
    168a:	2e 96       	adiw	r28, 0x0e	; 14
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <DIO_get_PORT_Vlaue>:
u8 DIO_get_PORT_Vlaue(u8 portNum ,u8*Register_Reading)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <DIO_get_PORT_Vlaue+0x6>
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <DIO_get_PORT_Vlaue+0x8>
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <DIO_get_PORT_Vlaue+0xa>
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	8a 83       	std	Y+2, r24	; 0x02
    16ac:	7c 83       	std	Y+4, r23	; 0x04
    16ae:	6b 83       	std	Y+3, r22	; 0x03
	s8 State;


		switch(portNum)
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	3e 83       	std	Y+6, r19	; 0x06
    16b8:	2d 83       	std	Y+5, r18	; 0x05
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	91 05       	cpc	r25, r1
    16c2:	e1 f0       	breq	.+56     	; 0x16fc <DIO_get_PORT_Vlaue+0x60>
    16c4:	2d 81       	ldd	r18, Y+5	; 0x05
    16c6:	3e 81       	ldd	r19, Y+6	; 0x06
    16c8:	22 30       	cpi	r18, 0x02	; 2
    16ca:	31 05       	cpc	r19, r1
    16cc:	2c f4       	brge	.+10     	; 0x16d8 <DIO_get_PORT_Vlaue+0x3c>
    16ce:	8d 81       	ldd	r24, Y+5	; 0x05
    16d0:	9e 81       	ldd	r25, Y+6	; 0x06
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	61 f0       	breq	.+24     	; 0x16ee <DIO_get_PORT_Vlaue+0x52>
    16d6:	27 c0       	rjmp	.+78     	; 0x1726 <DIO_get_PORT_Vlaue+0x8a>
    16d8:	2d 81       	ldd	r18, Y+5	; 0x05
    16da:	3e 81       	ldd	r19, Y+6	; 0x06
    16dc:	22 30       	cpi	r18, 0x02	; 2
    16de:	31 05       	cpc	r19, r1
    16e0:	a1 f0       	breq	.+40     	; 0x170a <DIO_get_PORT_Vlaue+0x6e>
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	9e 81       	ldd	r25, Y+6	; 0x06
    16e6:	83 30       	cpi	r24, 0x03	; 3
    16e8:	91 05       	cpc	r25, r1
    16ea:	b1 f0       	breq	.+44     	; 0x1718 <DIO_get_PORT_Vlaue+0x7c>
    16ec:	1c c0       	rjmp	.+56     	; 0x1726 <DIO_get_PORT_Vlaue+0x8a>
		{
		case PortA_Num :

			*Register_Reading = PINA;
    16ee:	e9 e3       	ldi	r30, 0x39	; 57
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	eb 81       	ldd	r30, Y+3	; 0x03
    16f6:	fc 81       	ldd	r31, Y+4	; 0x04
    16f8:	80 83       	st	Z, r24
    16fa:	16 c0       	rjmp	.+44     	; 0x1728 <DIO_get_PORT_Vlaue+0x8c>
			break;
		case PortB_Num:

			*Register_Reading = PINB;
    16fc:	e6 e3       	ldi	r30, 0x36	; 54
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	eb 81       	ldd	r30, Y+3	; 0x03
    1704:	fc 81       	ldd	r31, Y+4	; 0x04
    1706:	80 83       	st	Z, r24
    1708:	0f c0       	rjmp	.+30     	; 0x1728 <DIO_get_PORT_Vlaue+0x8c>
			break;

		case PortC_Num:
			*Register_Reading = PINC;
    170a:	e3 e3       	ldi	r30, 0x33	; 51
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	eb 81       	ldd	r30, Y+3	; 0x03
    1712:	fc 81       	ldd	r31, Y+4	; 0x04
    1714:	80 83       	st	Z, r24
    1716:	08 c0       	rjmp	.+16     	; 0x1728 <DIO_get_PORT_Vlaue+0x8c>
			break;

		case PortD_Num:
			*Register_Reading = PIND;
    1718:	e0 e3       	ldi	r30, 0x30	; 48
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	eb 81       	ldd	r30, Y+3	; 0x03
    1720:	fc 81       	ldd	r31, Y+4	; 0x04
    1722:	80 83       	st	Z, r24
    1724:	01 c0       	rjmp	.+2      	; 0x1728 <DIO_get_PORT_Vlaue+0x8c>
			break;
		default:
			State = Not_OK;
    1726:	19 82       	std	Y+1, r1	; 0x01
		}

		return(State);
    1728:	89 81       	ldd	r24, Y+1	; 0x01
}
    172a:	26 96       	adiw	r28, 0x06	; 6
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret

0000173c <DIO_get_PIN_Vlaue>:

u8 DIO_get_PIN_Vlaue(u8 portNum ,u8 pinNum,u8*PIN_value)
{
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	27 97       	sbiw	r28, 0x07	; 7
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	8a 83       	std	Y+2, r24	; 0x02
    1752:	6b 83       	std	Y+3, r22	; 0x03
    1754:	5d 83       	std	Y+5, r21	; 0x05
    1756:	4c 83       	std	Y+4, r20	; 0x04
	s8 State;


		switch(portNum)
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	3f 83       	std	Y+7, r19	; 0x07
    1760:	2e 83       	std	Y+6, r18	; 0x06
    1762:	4e 81       	ldd	r20, Y+6	; 0x06
    1764:	5f 81       	ldd	r21, Y+7	; 0x07
    1766:	41 30       	cpi	r20, 0x01	; 1
    1768:	51 05       	cpc	r21, r1
    176a:	c1 f1       	breq	.+112    	; 0x17dc <DIO_get_PIN_Vlaue+0xa0>
    176c:	8e 81       	ldd	r24, Y+6	; 0x06
    176e:	9f 81       	ldd	r25, Y+7	; 0x07
    1770:	82 30       	cpi	r24, 0x02	; 2
    1772:	91 05       	cpc	r25, r1
    1774:	34 f4       	brge	.+12     	; 0x1782 <DIO_get_PIN_Vlaue+0x46>
    1776:	2e 81       	ldd	r18, Y+6	; 0x06
    1778:	3f 81       	ldd	r19, Y+7	; 0x07
    177a:	21 15       	cp	r18, r1
    177c:	31 05       	cpc	r19, r1
    177e:	71 f0       	breq	.+28     	; 0x179c <DIO_get_PIN_Vlaue+0x60>
    1780:	8d c0       	rjmp	.+282    	; 0x189c <DIO_get_PIN_Vlaue+0x160>
    1782:	4e 81       	ldd	r20, Y+6	; 0x06
    1784:	5f 81       	ldd	r21, Y+7	; 0x07
    1786:	42 30       	cpi	r20, 0x02	; 2
    1788:	51 05       	cpc	r21, r1
    178a:	09 f4       	brne	.+2      	; 0x178e <DIO_get_PIN_Vlaue+0x52>
    178c:	47 c0       	rjmp	.+142    	; 0x181c <DIO_get_PIN_Vlaue+0xe0>
    178e:	8e 81       	ldd	r24, Y+6	; 0x06
    1790:	9f 81       	ldd	r25, Y+7	; 0x07
    1792:	83 30       	cpi	r24, 0x03	; 3
    1794:	91 05       	cpc	r25, r1
    1796:	09 f4       	brne	.+2      	; 0x179a <DIO_get_PIN_Vlaue+0x5e>
    1798:	61 c0       	rjmp	.+194    	; 0x185c <DIO_get_PIN_Vlaue+0x120>
    179a:	80 c0       	rjmp	.+256    	; 0x189c <DIO_get_PIN_Vlaue+0x160>
		{
		case PortA_Num :

			*PIN_value = 	Git_bit(PINA,pinNum);
    179c:	e9 e3       	ldi	r30, 0x39	; 57
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	48 2f       	mov	r20, r24
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <DIO_get_PIN_Vlaue+0x7a>
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	2a 95       	dec	r18
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <DIO_get_PIN_Vlaue+0x76>
    17ba:	9a 01       	movw	r18, r20
    17bc:	28 23       	and	r18, r24
    17be:	39 23       	and	r19, r25
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	88 2f       	mov	r24, r24
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	a9 01       	movw	r20, r18
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <DIO_get_PIN_Vlaue+0x92>
    17ca:	55 95       	asr	r21
    17cc:	47 95       	ror	r20
    17ce:	8a 95       	dec	r24
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <DIO_get_PIN_Vlaue+0x8e>
    17d2:	ca 01       	movw	r24, r20
    17d4:	ec 81       	ldd	r30, Y+4	; 0x04
    17d6:	fd 81       	ldd	r31, Y+5	; 0x05
    17d8:	80 83       	st	Z, r24
    17da:	61 c0       	rjmp	.+194    	; 0x189e <DIO_get_PIN_Vlaue+0x162>
			break;
		case PortB_Num:

			*PIN_value = 	Git_bit(PINB,pinNum);
    17dc:	e6 e3       	ldi	r30, 0x36	; 54
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	48 2f       	mov	r20, r24
    17e4:	50 e0       	ldi	r21, 0x00	; 0
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <DIO_get_PIN_Vlaue+0xba>
    17f2:	88 0f       	add	r24, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	2a 95       	dec	r18
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <DIO_get_PIN_Vlaue+0xb6>
    17fa:	9a 01       	movw	r18, r20
    17fc:	28 23       	and	r18, r24
    17fe:	39 23       	and	r19, r25
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	88 2f       	mov	r24, r24
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a9 01       	movw	r20, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <DIO_get_PIN_Vlaue+0xd2>
    180a:	55 95       	asr	r21
    180c:	47 95       	ror	r20
    180e:	8a 95       	dec	r24
    1810:	e2 f7       	brpl	.-8      	; 0x180a <DIO_get_PIN_Vlaue+0xce>
    1812:	ca 01       	movw	r24, r20
    1814:	ec 81       	ldd	r30, Y+4	; 0x04
    1816:	fd 81       	ldd	r31, Y+5	; 0x05
    1818:	80 83       	st	Z, r24
    181a:	41 c0       	rjmp	.+130    	; 0x189e <DIO_get_PIN_Vlaue+0x162>
			break;

		case PortC_Num:
			*PIN_value = 	Git_bit(PINC,pinNum);
    181c:	e3 e3       	ldi	r30, 0x33	; 51
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	48 2f       	mov	r20, r24
    1824:	50 e0       	ldi	r21, 0x00	; 0
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <DIO_get_PIN_Vlaue+0xfa>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	2a 95       	dec	r18
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <DIO_get_PIN_Vlaue+0xf6>
    183a:	9a 01       	movw	r18, r20
    183c:	28 23       	and	r18, r24
    183e:	39 23       	and	r19, r25
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	88 2f       	mov	r24, r24
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	a9 01       	movw	r20, r18
    1848:	02 c0       	rjmp	.+4      	; 0x184e <DIO_get_PIN_Vlaue+0x112>
    184a:	55 95       	asr	r21
    184c:	47 95       	ror	r20
    184e:	8a 95       	dec	r24
    1850:	e2 f7       	brpl	.-8      	; 0x184a <DIO_get_PIN_Vlaue+0x10e>
    1852:	ca 01       	movw	r24, r20
    1854:	ec 81       	ldd	r30, Y+4	; 0x04
    1856:	fd 81       	ldd	r31, Y+5	; 0x05
    1858:	80 83       	st	Z, r24
    185a:	21 c0       	rjmp	.+66     	; 0x189e <DIO_get_PIN_Vlaue+0x162>
			break;

		case PortD_Num:
			*PIN_value = 	Git_bit(PIND,pinNum);
    185c:	e0 e3       	ldi	r30, 0x30	; 48
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	48 2f       	mov	r20, r24
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <DIO_get_PIN_Vlaue+0x13a>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	2a 95       	dec	r18
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <DIO_get_PIN_Vlaue+0x136>
    187a:	9a 01       	movw	r18, r20
    187c:	28 23       	and	r18, r24
    187e:	39 23       	and	r19, r25
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a9 01       	movw	r20, r18
    1888:	02 c0       	rjmp	.+4      	; 0x188e <DIO_get_PIN_Vlaue+0x152>
    188a:	55 95       	asr	r21
    188c:	47 95       	ror	r20
    188e:	8a 95       	dec	r24
    1890:	e2 f7       	brpl	.-8      	; 0x188a <DIO_get_PIN_Vlaue+0x14e>
    1892:	ca 01       	movw	r24, r20
    1894:	ec 81       	ldd	r30, Y+4	; 0x04
    1896:	fd 81       	ldd	r31, Y+5	; 0x05
    1898:	80 83       	st	Z, r24
    189a:	01 c0       	rjmp	.+2      	; 0x189e <DIO_get_PIN_Vlaue+0x162>
			break;
		default:
			State = Not_OK;
    189c:	19 82       	std	Y+1, r1	; 0x01
		}

		return(State);
    189e:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a0:	27 96       	adiw	r28, 0x07	; 7
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <callbachfn>:
}*/

	u8 flag;
    u16*ptr;
	void callbachfn(u16*p)
	{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <callbachfn+0x6>
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01
		ptr = p ;
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	9a 81       	ldd	r25, Y+2	; 0x02
    18c4:	90 93 85 00 	sts	0x0085, r25
    18c8:	80 93 84 00 	sts	0x0084, r24
	flag=1;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	80 93 83 00 	sts	0x0083, r24
	}
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <main>:
	void main ()
	{
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	c6 54       	subi	r28, 0x46	; 70
    18ea:	d0 40       	sbci	r29, 0x00	; 0
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
	ADC_init();
    18f6:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_init>

		flag = 0 ;
    18fa:	10 92 83 00 	sts	0x0083, r1
		DIO_Set_PIN_Direction(PortA_Num,PIN_0,INPUT);
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	60 e0       	ldi	r22, 0x00	; 0
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	0e 94 be 08 	call	0x117c	; 0x117c <DIO_Set_PIN_Direction>
		DIO_Set_PIN_Direction(PortD_Num,PIN_5,OUTPUT);
    1908:	83 e0       	ldi	r24, 0x03	; 3
    190a:	65 e0       	ldi	r22, 0x05	; 5
    190c:	41 e0       	ldi	r20, 0x01	; 1
    190e:	0e 94 be 08 	call	0x117c	; 0x117c <DIO_Set_PIN_Direction>
		DIO_Set_PIN_Direction(PortD_Num,PIN_6,OUTPUT);
    1912:	83 e0       	ldi	r24, 0x03	; 3
    1914:	66 e0       	ldi	r22, 0x06	; 6
    1916:	41 e0       	ldi	r20, 0x01	; 1
    1918:	0e 94 be 08 	call	0x117c	; 0x117c <DIO_Set_PIN_Direction>
		DIO_Set_PIN_Direction(PortD_Num,PIN_7,OUTPUT);
    191c:	83 e0       	ldi	r24, 0x03	; 3
    191e:	67 e0       	ldi	r22, 0x07	; 7
    1920:	41 e0       	ldi	r20, 0x01	; 1
    1922:	0e 94 be 08 	call	0x117c	; 0x117c <DIO_Set_PIN_Direction>
		GIE_enable();
    1926:	af e5       	ldi	r26, 0x5F	; 95
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	ef e5       	ldi	r30, 0x5F	; 95
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	80 68       	ori	r24, 0x80	; 128
    1932:	8c 93       	st	X, r24


		while(1)
		{

			DIO_Set_PIN_Value(PortD_Num,PIN_5,HIGH);
    1934:	83 e0       	ldi	r24, 0x03	; 3
    1936:	65 e0       	ldi	r22, 0x05	; 5
    1938:	41 e0       	ldi	r20, 0x01	; 1
    193a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_Set_PIN_Value>
			DIO_Set_PIN_Value(PortD_Num,PIN_6,HIGH);
    193e:	83 e0       	ldi	r24, 0x03	; 3
    1940:	66 e0       	ldi	r22, 0x06	; 6
    1942:	41 e0       	ldi	r20, 0x01	; 1
    1944:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_Set_PIN_Value>
			DIO_Set_PIN_Value(PortD_Num,PIN_7,HIGH);
    1948:	83 e0       	ldi	r24, 0x03	; 3
    194a:	67 e0       	ldi	r22, 0x07	; 7
    194c:	41 e0       	ldi	r20, 0x01	; 1
    194e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_Set_PIN_Value>
    1952:	fe 01       	movw	r30, r28
    1954:	ed 5b       	subi	r30, 0xBD	; 189
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	aa e7       	ldi	r26, 0x7A	; 122
    195e:	b4 e4       	ldi	r27, 0x44	; 68
    1960:	80 83       	st	Z, r24
    1962:	91 83       	std	Z+1, r25	; 0x01
    1964:	a2 83       	std	Z+2, r26	; 0x02
    1966:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1968:	8e 01       	movw	r16, r28
    196a:	01 5c       	subi	r16, 0xC1	; 193
    196c:	1f 4f       	sbci	r17, 0xFF	; 255
    196e:	fe 01       	movw	r30, r28
    1970:	ed 5b       	subi	r30, 0xBD	; 189
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	60 81       	ld	r22, Z
    1976:	71 81       	ldd	r23, Z+1	; 0x01
    1978:	82 81       	ldd	r24, Z+2	; 0x02
    197a:	93 81       	ldd	r25, Z+3	; 0x03
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	4a ef       	ldi	r20, 0xFA	; 250
    1982:	54 e4       	ldi	r21, 0x44	; 68
    1984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	f8 01       	movw	r30, r16
    198e:	80 83       	st	Z, r24
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	a2 83       	std	Z+2, r26	; 0x02
    1994:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1996:	fe 01       	movw	r30, r28
    1998:	ff 96       	adiw	r30, 0x3f	; 63
    199a:	60 81       	ld	r22, Z
    199c:	71 81       	ldd	r23, Z+1	; 0x01
    199e:	82 81       	ldd	r24, Z+2	; 0x02
    19a0:	93 81       	ldd	r25, Z+3	; 0x03
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e8       	ldi	r20, 0x80	; 128
    19a8:	5f e3       	ldi	r21, 0x3F	; 63
    19aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ae:	88 23       	and	r24, r24
    19b0:	2c f4       	brge	.+10     	; 0x19bc <main+0xe0>
		__ticks = 1;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	9e af       	std	Y+62, r25	; 0x3e
    19b8:	8d af       	std	Y+61, r24	; 0x3d
    19ba:	46 c0       	rjmp	.+140    	; 0x1a48 <main+0x16c>
	else if (__tmp > 65535)
    19bc:	fe 01       	movw	r30, r28
    19be:	ff 96       	adiw	r30, 0x3f	; 63
    19c0:	60 81       	ld	r22, Z
    19c2:	71 81       	ldd	r23, Z+1	; 0x01
    19c4:	82 81       	ldd	r24, Z+2	; 0x02
    19c6:	93 81       	ldd	r25, Z+3	; 0x03
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	3f ef       	ldi	r19, 0xFF	; 255
    19cc:	4f e7       	ldi	r20, 0x7F	; 127
    19ce:	57 e4       	ldi	r21, 0x47	; 71
    19d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d4:	18 16       	cp	r1, r24
    19d6:	64 f5       	brge	.+88     	; 0x1a30 <main+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d8:	fe 01       	movw	r30, r28
    19da:	ed 5b       	subi	r30, 0xBD	; 189
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	60 81       	ld	r22, Z
    19e0:	71 81       	ldd	r23, Z+1	; 0x01
    19e2:	82 81       	ldd	r24, Z+2	; 0x02
    19e4:	93 81       	ldd	r25, Z+3	; 0x03
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e2       	ldi	r20, 0x20	; 32
    19ec:	51 e4       	ldi	r21, 0x41	; 65
    19ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	9e af       	std	Y+62, r25	; 0x3e
    1a04:	8d af       	std	Y+61, r24	; 0x3d
    1a06:	0f c0       	rjmp	.+30     	; 0x1a26 <main+0x14a>
    1a08:	88 ec       	ldi	r24, 0xC8	; 200
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9c af       	std	Y+60, r25	; 0x3c
    1a0e:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a10:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a12:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <main+0x138>
    1a18:	9c af       	std	Y+60, r25	; 0x3c
    1a1a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a1e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	9e af       	std	Y+62, r25	; 0x3e
    1a24:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a26:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a28:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	69 f7       	brne	.-38     	; 0x1a08 <main+0x12c>
    1a2e:	16 c0       	rjmp	.+44     	; 0x1a5c <main+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a30:	fe 01       	movw	r30, r28
    1a32:	ff 96       	adiw	r30, 0x3f	; 63
    1a34:	60 81       	ld	r22, Z
    1a36:	71 81       	ldd	r23, Z+1	; 0x01
    1a38:	82 81       	ldd	r24, Z+2	; 0x02
    1a3a:	93 81       	ldd	r25, Z+3	; 0x03
    1a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9e af       	std	Y+62, r25	; 0x3e
    1a46:	8d af       	std	Y+61, r24	; 0x3d
    1a48:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a4c:	9a af       	std	Y+58, r25	; 0x3a
    1a4e:	89 af       	std	Y+57, r24	; 0x39
    1a50:	89 ad       	ldd	r24, Y+57	; 0x39
    1a52:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <main+0x178>
    1a58:	9a af       	std	Y+58, r25	; 0x3a
    1a5a:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1000);


			ADC_customizeFreeRunConversion(callbachfn);
    1a5c:	89 e5       	ldi	r24, 0x59	; 89
    1a5e:	9c e0       	ldi	r25, 0x0C	; 12
    1a60:	0e 94 24 06 	call	0xc48	; 0xc48 <ADC_customizeFreeRunConversion>

			while (flag == 0);
    1a64:	80 91 83 00 	lds	r24, 0x0083
    1a68:	88 23       	and	r24, r24
    1a6a:	e1 f3       	breq	.-8      	; 0x1a64 <main+0x188>

			while (ptr[0]==0xFFFF);
    1a6c:	e0 91 84 00 	lds	r30, 0x0084
    1a70:	f0 91 85 00 	lds	r31, 0x0085
    1a74:	80 81       	ld	r24, Z
    1a76:	91 81       	ldd	r25, Z+1	; 0x01
    1a78:	ff ef       	ldi	r31, 0xFF	; 255
    1a7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a7c:	9f 07       	cpc	r25, r31
    1a7e:	b1 f3       	breq	.-20     	; 0x1a6c <main+0x190>
			DIO_Set_PIN_Value(PortD_Num,PIN_5,HIGH);
    1a80:	83 e0       	ldi	r24, 0x03	; 3
    1a82:	65 e0       	ldi	r22, 0x05	; 5
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_Set_PIN_Value>
			DIO_Set_PIN_Value(PortD_Num,PIN_6,LOW);
    1a8a:	83 e0       	ldi	r24, 0x03	; 3
    1a8c:	66 e0       	ldi	r22, 0x06	; 6
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_Set_PIN_Value>
			DIO_Set_PIN_Value(PortD_Num,PIN_7,LOW);
    1a94:	83 e0       	ldi	r24, 0x03	; 3
    1a96:	67 e0       	ldi	r22, 0x07	; 7
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_Set_PIN_Value>
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	aa e7       	ldi	r26, 0x7A	; 122
    1aa4:	b4 e4       	ldi	r27, 0x44	; 68
    1aa6:	8d ab       	std	Y+53, r24	; 0x35
    1aa8:	9e ab       	std	Y+54, r25	; 0x36
    1aaa:	af ab       	std	Y+55, r26	; 0x37
    1aac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aae:	6d a9       	ldd	r22, Y+53	; 0x35
    1ab0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ab2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ab4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	4a ef       	ldi	r20, 0xFA	; 250
    1abc:	54 e4       	ldi	r21, 0x44	; 68
    1abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	89 ab       	std	Y+49, r24	; 0x31
    1ac8:	9a ab       	std	Y+50, r25	; 0x32
    1aca:	ab ab       	std	Y+51, r26	; 0x33
    1acc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ace:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e8       	ldi	r20, 0x80	; 128
    1adc:	5f e3       	ldi	r21, 0x3F	; 63
    1ade:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae2:	88 23       	and	r24, r24
    1ae4:	2c f4       	brge	.+10     	; 0x1af0 <main+0x214>
		__ticks = 1;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	98 ab       	std	Y+48, r25	; 0x30
    1aec:	8f a7       	std	Y+47, r24	; 0x2f
    1aee:	3f c0       	rjmp	.+126    	; 0x1b6e <main+0x292>
	else if (__tmp > 65535)
    1af0:	69 a9       	ldd	r22, Y+49	; 0x31
    1af2:	7a a9       	ldd	r23, Y+50	; 0x32
    1af4:	8b a9       	ldd	r24, Y+51	; 0x33
    1af6:	9c a9       	ldd	r25, Y+52	; 0x34
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	3f ef       	ldi	r19, 0xFF	; 255
    1afc:	4f e7       	ldi	r20, 0x7F	; 127
    1afe:	57 e4       	ldi	r21, 0x47	; 71
    1b00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b04:	18 16       	cp	r1, r24
    1b06:	4c f5       	brge	.+82     	; 0x1b5a <main+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b08:	6d a9       	ldd	r22, Y+53	; 0x35
    1b0a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b0c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b0e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e2       	ldi	r20, 0x20	; 32
    1b16:	51 e4       	ldi	r21, 0x41	; 65
    1b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	98 ab       	std	Y+48, r25	; 0x30
    1b2e:	8f a7       	std	Y+47, r24	; 0x2f
    1b30:	0f c0       	rjmp	.+30     	; 0x1b50 <main+0x274>
    1b32:	88 ec       	ldi	r24, 0xC8	; 200
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	9e a7       	std	Y+46, r25	; 0x2e
    1b38:	8d a7       	std	Y+45, r24	; 0x2d
    1b3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <main+0x262>
    1b42:	9e a7       	std	Y+46, r25	; 0x2e
    1b44:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b48:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	98 ab       	std	Y+48, r25	; 0x30
    1b4e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b52:	98 a9       	ldd	r25, Y+48	; 0x30
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	69 f7       	brne	.-38     	; 0x1b32 <main+0x256>
    1b58:	14 c0       	rjmp	.+40     	; 0x1b82 <main+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b60:	9c a9       	ldd	r25, Y+52	; 0x34
    1b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	98 ab       	std	Y+48, r25	; 0x30
    1b6c:	8f a7       	std	Y+47, r24	; 0x2f
    1b6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b70:	98 a9       	ldd	r25, Y+48	; 0x30
    1b72:	9c a7       	std	Y+44, r25	; 0x2c
    1b74:	8b a7       	std	Y+43, r24	; 0x2b
    1b76:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b78:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <main+0x29e>
    1b7e:	9c a7       	std	Y+44, r25	; 0x2c
    1b80:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			while (ptr[1]==0xFFFF);
    1b82:	80 91 84 00 	lds	r24, 0x0084
    1b86:	90 91 85 00 	lds	r25, 0x0085
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	32 96       	adiw	r30, 0x02	; 2
    1b8e:	80 81       	ld	r24, Z
    1b90:	91 81       	ldd	r25, Z+1	; 0x01
    1b92:	2f ef       	ldi	r18, 0xFF	; 255
    1b94:	8f 3f       	cpi	r24, 0xFF	; 255
    1b96:	92 07       	cpc	r25, r18
    1b98:	a1 f3       	breq	.-24     	; 0x1b82 <main+0x2a6>
			DIO_Set_PIN_Value(PortD_Num,PIN_5,LOW);
    1b9a:	83 e0       	ldi	r24, 0x03	; 3
    1b9c:	65 e0       	ldi	r22, 0x05	; 5
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_Set_PIN_Value>
			DIO_Set_PIN_Value(PortD_Num,PIN_6,HIGH);
    1ba4:	83 e0       	ldi	r24, 0x03	; 3
    1ba6:	66 e0       	ldi	r22, 0x06	; 6
    1ba8:	41 e0       	ldi	r20, 0x01	; 1
    1baa:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_Set_PIN_Value>
			DIO_Set_PIN_Value(PortD_Num,PIN_7,LOW);
    1bae:	83 e0       	ldi	r24, 0x03	; 3
    1bb0:	67 e0       	ldi	r22, 0x07	; 7
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_Set_PIN_Value>
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	aa e7       	ldi	r26, 0x7A	; 122
    1bbe:	b4 e4       	ldi	r27, 0x44	; 68
    1bc0:	8f a3       	std	Y+39, r24	; 0x27
    1bc2:	98 a7       	std	Y+40, r25	; 0x28
    1bc4:	a9 a7       	std	Y+41, r26	; 0x29
    1bc6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc8:	6f a1       	ldd	r22, Y+39	; 0x27
    1bca:	78 a5       	ldd	r23, Y+40	; 0x28
    1bcc:	89 a5       	ldd	r24, Y+41	; 0x29
    1bce:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	4a ef       	ldi	r20, 0xFA	; 250
    1bd6:	54 e4       	ldi	r21, 0x44	; 68
    1bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	8b a3       	std	Y+35, r24	; 0x23
    1be2:	9c a3       	std	Y+36, r25	; 0x24
    1be4:	ad a3       	std	Y+37, r26	; 0x25
    1be6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1be8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bea:	7c a1       	ldd	r23, Y+36	; 0x24
    1bec:	8d a1       	ldd	r24, Y+37	; 0x25
    1bee:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e8       	ldi	r20, 0x80	; 128
    1bf6:	5f e3       	ldi	r21, 0x3F	; 63
    1bf8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bfc:	88 23       	and	r24, r24
    1bfe:	2c f4       	brge	.+10     	; 0x1c0a <main+0x32e>
		__ticks = 1;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	9a a3       	std	Y+34, r25	; 0x22
    1c06:	89 a3       	std	Y+33, r24	; 0x21
    1c08:	3f c0       	rjmp	.+126    	; 0x1c88 <main+0x3ac>
	else if (__tmp > 65535)
    1c0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c10:	9e a1       	ldd	r25, Y+38	; 0x26
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	3f ef       	ldi	r19, 0xFF	; 255
    1c16:	4f e7       	ldi	r20, 0x7F	; 127
    1c18:	57 e4       	ldi	r21, 0x47	; 71
    1c1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c1e:	18 16       	cp	r1, r24
    1c20:	4c f5       	brge	.+82     	; 0x1c74 <main+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c22:	6f a1       	ldd	r22, Y+39	; 0x27
    1c24:	78 a5       	ldd	r23, Y+40	; 0x28
    1c26:	89 a5       	ldd	r24, Y+41	; 0x29
    1c28:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e2       	ldi	r20, 0x20	; 32
    1c30:	51 e4       	ldi	r21, 0x41	; 65
    1c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	bc 01       	movw	r22, r24
    1c3c:	cd 01       	movw	r24, r26
    1c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	9a a3       	std	Y+34, r25	; 0x22
    1c48:	89 a3       	std	Y+33, r24	; 0x21
    1c4a:	0f c0       	rjmp	.+30     	; 0x1c6a <main+0x38e>
    1c4c:	88 ec       	ldi	r24, 0xC8	; 200
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	98 a3       	std	Y+32, r25	; 0x20
    1c52:	8f 8f       	std	Y+31, r24	; 0x1f
    1c54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c56:	98 a1       	ldd	r25, Y+32	; 0x20
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <main+0x37c>
    1c5c:	98 a3       	std	Y+32, r25	; 0x20
    1c5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c60:	89 a1       	ldd	r24, Y+33	; 0x21
    1c62:	9a a1       	ldd	r25, Y+34	; 0x22
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	9a a3       	std	Y+34, r25	; 0x22
    1c68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	69 f7       	brne	.-38     	; 0x1c4c <main+0x370>
    1c72:	14 c0       	rjmp	.+40     	; 0x1c9c <main+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c74:	6b a1       	ldd	r22, Y+35	; 0x23
    1c76:	7c a1       	ldd	r23, Y+36	; 0x24
    1c78:	8d a1       	ldd	r24, Y+37	; 0x25
    1c7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	9a a3       	std	Y+34, r25	; 0x22
    1c86:	89 a3       	std	Y+33, r24	; 0x21
    1c88:	89 a1       	ldd	r24, Y+33	; 0x21
    1c8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c8e:	8d 8f       	std	Y+29, r24	; 0x1d
    1c90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <main+0x3b8>
    1c98:	9e 8f       	std	Y+30, r25	; 0x1e
    1c9a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);

			while (ptr[2]==0xFFFF);
    1c9c:	80 91 84 00 	lds	r24, 0x0084
    1ca0:	90 91 85 00 	lds	r25, 0x0085
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	34 96       	adiw	r30, 0x04	; 4
    1ca8:	80 81       	ld	r24, Z
    1caa:	91 81       	ldd	r25, Z+1	; 0x01
    1cac:	ef ef       	ldi	r30, 0xFF	; 255
    1cae:	8f 3f       	cpi	r24, 0xFF	; 255
    1cb0:	9e 07       	cpc	r25, r30
    1cb2:	a1 f3       	breq	.-24     	; 0x1c9c <main+0x3c0>
			DIO_Set_PIN_Value(PortD_Num,PIN_5,LOW);
    1cb4:	83 e0       	ldi	r24, 0x03	; 3
    1cb6:	65 e0       	ldi	r22, 0x05	; 5
    1cb8:	40 e0       	ldi	r20, 0x00	; 0
    1cba:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_Set_PIN_Value>
			DIO_Set_PIN_Value(PortD_Num,PIN_6,LOW);
    1cbe:	83 e0       	ldi	r24, 0x03	; 3
    1cc0:	66 e0       	ldi	r22, 0x06	; 6
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_Set_PIN_Value>
			DIO_Set_PIN_Value(PortD_Num,PIN_7,HIGH);
    1cc8:	83 e0       	ldi	r24, 0x03	; 3
    1cca:	67 e0       	ldi	r22, 0x07	; 7
    1ccc:	41 e0       	ldi	r20, 0x01	; 1
    1cce:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_Set_PIN_Value>
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	aa e7       	ldi	r26, 0x7A	; 122
    1cd8:	b4 e4       	ldi	r27, 0x44	; 68
    1cda:	89 8f       	std	Y+25, r24	; 0x19
    1cdc:	9a 8f       	std	Y+26, r25	; 0x1a
    1cde:	ab 8f       	std	Y+27, r26	; 0x1b
    1ce0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	4a ef       	ldi	r20, 0xFA	; 250
    1cf0:	54 e4       	ldi	r21, 0x44	; 68
    1cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	8d 8b       	std	Y+21, r24	; 0x15
    1cfc:	9e 8b       	std	Y+22, r25	; 0x16
    1cfe:	af 8b       	std	Y+23, r26	; 0x17
    1d00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d02:	6d 89       	ldd	r22, Y+21	; 0x15
    1d04:	7e 89       	ldd	r23, Y+22	; 0x16
    1d06:	8f 89       	ldd	r24, Y+23	; 0x17
    1d08:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e8       	ldi	r20, 0x80	; 128
    1d10:	5f e3       	ldi	r21, 0x3F	; 63
    1d12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d16:	88 23       	and	r24, r24
    1d18:	2c f4       	brge	.+10     	; 0x1d24 <main+0x448>
		__ticks = 1;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	9c 8b       	std	Y+20, r25	; 0x14
    1d20:	8b 8b       	std	Y+19, r24	; 0x13
    1d22:	3f c0       	rjmp	.+126    	; 0x1da2 <main+0x4c6>
	else if (__tmp > 65535)
    1d24:	6d 89       	ldd	r22, Y+21	; 0x15
    1d26:	7e 89       	ldd	r23, Y+22	; 0x16
    1d28:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	3f ef       	ldi	r19, 0xFF	; 255
    1d30:	4f e7       	ldi	r20, 0x7F	; 127
    1d32:	57 e4       	ldi	r21, 0x47	; 71
    1d34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d38:	18 16       	cp	r1, r24
    1d3a:	4c f5       	brge	.+82     	; 0x1d8e <main+0x4b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e2       	ldi	r20, 0x20	; 32
    1d4a:	51 e4       	ldi	r21, 0x41	; 65
    1d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	bc 01       	movw	r22, r24
    1d56:	cd 01       	movw	r24, r26
    1d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9c 8b       	std	Y+20, r25	; 0x14
    1d62:	8b 8b       	std	Y+19, r24	; 0x13
    1d64:	0f c0       	rjmp	.+30     	; 0x1d84 <main+0x4a8>
    1d66:	88 ec       	ldi	r24, 0xC8	; 200
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	9a 8b       	std	Y+18, r25	; 0x12
    1d6c:	89 8b       	std	Y+17, r24	; 0x11
    1d6e:	89 89       	ldd	r24, Y+17	; 0x11
    1d70:	9a 89       	ldd	r25, Y+18	; 0x12
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <main+0x496>
    1d76:	9a 8b       	std	Y+18, r25	; 0x12
    1d78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	9c 8b       	std	Y+20, r25	; 0x14
    1d82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d84:	8b 89       	ldd	r24, Y+19	; 0x13
    1d86:	9c 89       	ldd	r25, Y+20	; 0x14
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	69 f7       	brne	.-38     	; 0x1d66 <main+0x48a>
    1d8c:	14 c0       	rjmp	.+40     	; 0x1db6 <main+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d90:	7e 89       	ldd	r23, Y+22	; 0x16
    1d92:	8f 89       	ldd	r24, Y+23	; 0x17
    1d94:	98 8d       	ldd	r25, Y+24	; 0x18
    1d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	9c 8b       	std	Y+20, r25	; 0x14
    1da0:	8b 8b       	std	Y+19, r24	; 0x13
    1da2:	8b 89       	ldd	r24, Y+19	; 0x13
    1da4:	9c 89       	ldd	r25, Y+20	; 0x14
    1da6:	98 8b       	std	Y+16, r25	; 0x10
    1da8:	8f 87       	std	Y+15, r24	; 0x0f
    1daa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dac:	98 89       	ldd	r25, Y+16	; 0x10
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <main+0x4d2>
    1db2:	98 8b       	std	Y+16, r25	; 0x10
    1db4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);

			while (ptr[3]==0xFFFF);
    1db6:	80 91 84 00 	lds	r24, 0x0084
    1dba:	90 91 85 00 	lds	r25, 0x0085
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	36 96       	adiw	r30, 0x06	; 6
    1dc2:	80 81       	ld	r24, Z
    1dc4:	91 81       	ldd	r25, Z+1	; 0x01
    1dc6:	ff ef       	ldi	r31, 0xFF	; 255
    1dc8:	8f 3f       	cpi	r24, 0xFF	; 255
    1dca:	9f 07       	cpc	r25, r31
    1dcc:	a1 f3       	breq	.-24     	; 0x1db6 <main+0x4da>
			DIO_Set_PIN_Value(PortD_Num,PIN_5,LOW);
    1dce:	83 e0       	ldi	r24, 0x03	; 3
    1dd0:	65 e0       	ldi	r22, 0x05	; 5
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_Set_PIN_Value>
			DIO_Set_PIN_Value(PortD_Num,PIN_6,HIGH);
    1dd8:	83 e0       	ldi	r24, 0x03	; 3
    1dda:	66 e0       	ldi	r22, 0x06	; 6
    1ddc:	41 e0       	ldi	r20, 0x01	; 1
    1dde:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_Set_PIN_Value>
			DIO_Set_PIN_Value(PortD_Num,PIN_7,LOW);
    1de2:	83 e0       	ldi	r24, 0x03	; 3
    1de4:	67 e0       	ldi	r22, 0x07	; 7
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_Set_PIN_Value>
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	aa e7       	ldi	r26, 0x7A	; 122
    1df2:	b4 e4       	ldi	r27, 0x44	; 68
    1df4:	8b 87       	std	Y+11, r24	; 0x0b
    1df6:	9c 87       	std	Y+12, r25	; 0x0c
    1df8:	ad 87       	std	Y+13, r26	; 0x0d
    1dfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	4a ef       	ldi	r20, 0xFA	; 250
    1e0a:	54 e4       	ldi	r21, 0x44	; 68
    1e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	8f 83       	std	Y+7, r24	; 0x07
    1e16:	98 87       	std	Y+8, r25	; 0x08
    1e18:	a9 87       	std	Y+9, r26	; 0x09
    1e1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1e:	78 85       	ldd	r23, Y+8	; 0x08
    1e20:	89 85       	ldd	r24, Y+9	; 0x09
    1e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e8       	ldi	r20, 0x80	; 128
    1e2a:	5f e3       	ldi	r21, 0x3F	; 63
    1e2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e30:	88 23       	and	r24, r24
    1e32:	2c f4       	brge	.+10     	; 0x1e3e <main+0x562>
		__ticks = 1;
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	9e 83       	std	Y+6, r25	; 0x06
    1e3a:	8d 83       	std	Y+5, r24	; 0x05
    1e3c:	3f c0       	rjmp	.+126    	; 0x1ebc <main+0x5e0>
	else if (__tmp > 65535)
    1e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e40:	78 85       	ldd	r23, Y+8	; 0x08
    1e42:	89 85       	ldd	r24, Y+9	; 0x09
    1e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	3f ef       	ldi	r19, 0xFF	; 255
    1e4a:	4f e7       	ldi	r20, 0x7F	; 127
    1e4c:	57 e4       	ldi	r21, 0x47	; 71
    1e4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e52:	18 16       	cp	r1, r24
    1e54:	4c f5       	brge	.+82     	; 0x1ea8 <main+0x5cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e2       	ldi	r20, 0x20	; 32
    1e64:	51 e4       	ldi	r21, 0x41	; 65
    1e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	9e 83       	std	Y+6, r25	; 0x06
    1e7c:	8d 83       	std	Y+5, r24	; 0x05
    1e7e:	0f c0       	rjmp	.+30     	; 0x1e9e <main+0x5c2>
    1e80:	88 ec       	ldi	r24, 0xC8	; 200
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	9c 83       	std	Y+4, r25	; 0x04
    1e86:	8b 83       	std	Y+3, r24	; 0x03
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <main+0x5b0>
    1e90:	9c 83       	std	Y+4, r25	; 0x04
    1e92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e94:	8d 81       	ldd	r24, Y+5	; 0x05
    1e96:	9e 81       	ldd	r25, Y+6	; 0x06
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	9e 83       	std	Y+6, r25	; 0x06
    1e9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	69 f7       	brne	.-38     	; 0x1e80 <main+0x5a4>
    1ea6:	14 c0       	rjmp	.+40     	; 0x1ed0 <main+0x5f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eaa:	78 85       	ldd	r23, Y+8	; 0x08
    1eac:	89 85       	ldd	r24, Y+9	; 0x09
    1eae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	9e 83       	std	Y+6, r25	; 0x06
    1eba:	8d 83       	std	Y+5, r24	; 0x05
    1ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec0:	9a 83       	std	Y+2, r25	; 0x02
    1ec2:	89 83       	std	Y+1, r24	; 0x01
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <main+0x5ec>
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			flag=0;
    1ed0:	10 92 83 00 	sts	0x0083, r1
    1ed4:	2f cd       	rjmp	.-1442   	; 0x1934 <main+0x58>

00001ed6 <__prologue_saves__>:
    1ed6:	2f 92       	push	r2
    1ed8:	3f 92       	push	r3
    1eda:	4f 92       	push	r4
    1edc:	5f 92       	push	r5
    1ede:	6f 92       	push	r6
    1ee0:	7f 92       	push	r7
    1ee2:	8f 92       	push	r8
    1ee4:	9f 92       	push	r9
    1ee6:	af 92       	push	r10
    1ee8:	bf 92       	push	r11
    1eea:	cf 92       	push	r12
    1eec:	df 92       	push	r13
    1eee:	ef 92       	push	r14
    1ef0:	ff 92       	push	r15
    1ef2:	0f 93       	push	r16
    1ef4:	1f 93       	push	r17
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	ca 1b       	sub	r28, r26
    1f00:	db 0b       	sbc	r29, r27
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
    1f0c:	09 94       	ijmp

00001f0e <__epilogue_restores__>:
    1f0e:	2a 88       	ldd	r2, Y+18	; 0x12
    1f10:	39 88       	ldd	r3, Y+17	; 0x11
    1f12:	48 88       	ldd	r4, Y+16	; 0x10
    1f14:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f16:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f18:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f20:	b9 84       	ldd	r11, Y+9	; 0x09
    1f22:	c8 84       	ldd	r12, Y+8	; 0x08
    1f24:	df 80       	ldd	r13, Y+7	; 0x07
    1f26:	ee 80       	ldd	r14, Y+6	; 0x06
    1f28:	fd 80       	ldd	r15, Y+5	; 0x05
    1f2a:	0c 81       	ldd	r16, Y+4	; 0x04
    1f2c:	1b 81       	ldd	r17, Y+3	; 0x03
    1f2e:	aa 81       	ldd	r26, Y+2	; 0x02
    1f30:	b9 81       	ldd	r27, Y+1	; 0x01
    1f32:	ce 0f       	add	r28, r30
    1f34:	d1 1d       	adc	r29, r1
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	f8 94       	cli
    1f3a:	de bf       	out	0x3e, r29	; 62
    1f3c:	0f be       	out	0x3f, r0	; 63
    1f3e:	cd bf       	out	0x3d, r28	; 61
    1f40:	ed 01       	movw	r28, r26
    1f42:	08 95       	ret

00001f44 <_exit>:
    1f44:	f8 94       	cli

00001f46 <__stop_program>:
    1f46:	ff cf       	rjmp	.-2      	; 0x1f46 <__stop_program>
